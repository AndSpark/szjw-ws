{"version":3,"file":"szjw-ws.js","sources":["../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/byte.js","../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/frame-impl.js","../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/parser.js","../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/types.js","../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/versions.js","../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/augment-websocket.js","../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/stomp-handler.js","../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/client.js","../node_modules/.pnpm/@stomp+rx-stomp@2.0.0_5oik75f6xlrwqgyz3kyxxdpe2e/node_modules/@stomp/rx-stomp/esm6/rx-stomp-state.js","../node_modules/.pnpm/@stomp+rx-stomp@2.0.0_5oik75f6xlrwqgyz3kyxxdpe2e/node_modules/@stomp/rx-stomp/esm6/rx-stomp.js","../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/rng.js","../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/native.js","../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v4.js","../src/core/enum.ts","../src/core/config.ts","../src/core/ws.ts","../src/core/decorator.ts","../src/core/type.ts"],"sourcesContent":["/**\n * Some byte values, used as per STOMP specifications.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport const BYTE = {\n    // LINEFEED byte (octet 10)\n    LF: '\\x0A',\n    // NULL byte (octet 0)\n    NULL: '\\x00',\n};\n//# sourceMappingURL=byte.js.map","import { BYTE } from './byte.js';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport class FrameImpl {\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    constructor(params) {\n        const { command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader, } = params;\n        this.command = command;\n        this.headers = Object.assign({}, headers || {});\n        if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n        }\n        else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n        }\n        this.escapeHeaderValues = escapeHeaderValues || false;\n        this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    /**\n     * body of the frame\n     */\n    get body() {\n        if (!this._body && this.isBinaryBody) {\n            this._body = new TextDecoder().decode(this._binaryBody);\n        }\n        return this._body || '';\n    }\n    /**\n     * body as Uint8Array\n     */\n    get binaryBody() {\n        if (!this._binaryBody && !this.isBinaryBody) {\n            this._binaryBody = new TextEncoder().encode(this._body);\n        }\n        // At this stage it will definitely have a valid value\n        return this._binaryBody;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    static fromRawFrame(rawFrame, escapeHeaderValues) {\n        const headers = {};\n        const trim = (str) => str.replace(/^\\s+|\\s+$/g, '');\n        // In case of repeated headers, as per standards, first value need to be used\n        for (const header of rawFrame.headers.reverse()) {\n            const idx = header.indexOf(':');\n            const key = trim(header[0]);\n            let value = trim(header[1]);\n            if (escapeHeaderValues &&\n                rawFrame.command !== 'CONNECT' &&\n                rawFrame.command !== 'CONNECTED') {\n                value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n        }\n        return new FrameImpl({\n            command: rawFrame.command,\n            headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues,\n        });\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    serialize() {\n        const cmdAndHeaders = this.serializeCmdAndHeaders();\n        if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n        }\n        else {\n            return cmdAndHeaders + this._body + BYTE.NULL;\n        }\n    }\n    serializeCmdAndHeaders() {\n        const lines = [this.command];\n        if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n        }\n        for (const name of Object.keys(this.headers || {})) {\n            const value = this.headers[name];\n            if (this.escapeHeaderValues &&\n                this.command !== 'CONNECT' &&\n                this.command !== 'CONNECTED') {\n                lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n            }\n            else {\n                lines.push(`${name}:${value}`);\n            }\n        }\n        if (this.isBinaryBody ||\n            (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n            lines.push(`content-length:${this.bodyLength()}`);\n        }\n        return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n    isBodyEmpty() {\n        return this.bodyLength() === 0;\n    }\n    bodyLength() {\n        const binaryBody = this.binaryBody;\n        return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    static sizeOfUTF8(s) {\n        return s ? new TextEncoder().encode(s).length : 0;\n    }\n    static toUnit8Array(cmdAndHeaders, binaryBody) {\n        const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n        const nullTerminator = new Uint8Array([0]);\n        const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n        uint8Frame.set(uint8CmdAndHeaders);\n        uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n        uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n        return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    static marshall(params) {\n        const frame = new FrameImpl(params);\n        return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n    static hdrValueEscape(str) {\n        return str\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n    static hdrValueUnEscape(str) {\n        return str\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\n/g, '\\n')\n            .replace(/\\\\c/g, ':')\n            .replace(/\\\\\\\\/g, '\\\\');\n    }\n}\n//# sourceMappingURL=frame-impl.js.map","/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\nconst LF = 10;\n/**\n * @internal\n */\nconst CR = 13;\n/**\n * @internal\n */\nconst COLON = 58;\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class Parser {\n    constructor(onFrame, onIncomingPing) {\n        this.onFrame = onFrame;\n        this.onIncomingPing = onIncomingPing;\n        this._encoder = new TextEncoder();\n        this._decoder = new TextDecoder();\n        this._token = [];\n        this._initState();\n    }\n    parseChunk(segment, appendMissingNULLonIncoming = false) {\n        let chunk;\n        if (typeof segment === 'string') {\n            chunk = this._encoder.encode(segment);\n        }\n        else {\n            chunk = new Uint8Array(segment);\n        }\n        // See https://github.com/stomp-js/stompjs/issues/89\n        // Remove when underlying issue is fixed.\n        //\n        // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n        if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n            const chunkWithNull = new Uint8Array(chunk.length + 1);\n            chunkWithNull.set(chunk, 0);\n            chunkWithNull[chunk.length] = 0;\n            chunk = chunkWithNull;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < chunk.length; i++) {\n            const byte = chunk[i];\n            this._onByte(byte);\n        }\n    }\n    // The following implements a simple Rec Descent Parser.\n    // The grammar is simple and just one byte tells what should be the next state\n    _collectFrame(byte) {\n        if (byte === NULL) {\n            // Ignore\n            return;\n        }\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            // Incoming Ping\n            this.onIncomingPing();\n            return;\n        }\n        this._onByte = this._collectCommand;\n        this._reinjectByte(byte);\n    }\n    _collectCommand(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.command = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaders(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._setupCollectBody();\n            return;\n        }\n        this._onByte = this._collectHeaderKey;\n        this._reinjectByte(byte);\n    }\n    _reinjectByte(byte) {\n        this._onByte(byte);\n    }\n    _collectHeaderKey(byte) {\n        if (byte === COLON) {\n            this._headerKey = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaderValue;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaderValue(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.headers.push([\n                this._headerKey,\n                this._consumeTokenAsUTF8(),\n            ]);\n            this._headerKey = undefined;\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _setupCollectBody() {\n        const contentLengthHeader = this._results.headers.filter((header) => {\n            return header[0] === 'content-length';\n        })[0];\n        if (contentLengthHeader) {\n            this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n            this._onByte = this._collectBodyFixedSize;\n        }\n        else {\n            this._onByte = this._collectBodyNullTerminated;\n        }\n    }\n    _collectBodyNullTerminated(byte) {\n        if (byte === NULL) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectBodyFixedSize(byte) {\n        // It is post decrement, so that we discard the trailing NULL octet\n        if (this._bodyBytesRemaining-- === 0) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _retrievedBody() {\n        this._results.binaryBody = this._consumeTokenAsRaw();\n        try {\n            this.onFrame(this._results);\n        }\n        catch (e) {\n            console.log(`Ignoring an exception thrown by a frame handler. Original exception: `, e);\n        }\n        this._initState();\n    }\n    // Rec Descent Parser helpers\n    _consumeByte(byte) {\n        this._token.push(byte);\n    }\n    _consumeTokenAsUTF8() {\n        return this._decoder.decode(this._consumeTokenAsRaw());\n    }\n    _consumeTokenAsRaw() {\n        const rawResult = new Uint8Array(this._token);\n        this._token = [];\n        return rawResult;\n    }\n    _initState() {\n        this._results = {\n            command: undefined,\n            headers: [],\n            binaryBody: undefined,\n        };\n        this._token = [];\n        this._headerKey = undefined;\n        this._onByte = this._collectFrame;\n    }\n}\n//# sourceMappingURL=parser.js.map","/**\n * Possible states for the IStompSocket\n */\nexport var StompSocketState;\n(function (StompSocketState) {\n    StompSocketState[StompSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    StompSocketState[StompSocketState[\"OPEN\"] = 1] = \"OPEN\";\n    StompSocketState[StompSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n    StompSocketState[StompSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(StompSocketState = StompSocketState || (StompSocketState = {}));\n/**\n * Possible activation state\n */\nexport var ActivationState;\n(function (ActivationState) {\n    ActivationState[ActivationState[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    ActivationState[ActivationState[\"DEACTIVATING\"] = 1] = \"DEACTIVATING\";\n    ActivationState[ActivationState[\"INACTIVE\"] = 2] = \"INACTIVE\";\n})(ActivationState = ActivationState || (ActivationState = {}));\n//# sourceMappingURL=types.js.map","/**\n * Supported STOMP versions\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Versions {\n    /**\n     * Takes an array of versions, typical elements '1.2', '1.1', or '1.0'\n     *\n     * You will be creating an instance of this class if you want to override\n     * supported versions to be declared during STOMP handshake.\n     */\n    constructor(versions) {\n        this.versions = versions;\n    }\n    /**\n     * Used as part of CONNECT STOMP Frame\n     */\n    supportedVersions() {\n        return this.versions.join(',');\n    }\n    /**\n     * Used while creating a WebSocket\n     */\n    protocolVersions() {\n        return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n    }\n}\n/**\n * Indicates protocol version 1.0\n */\nVersions.V1_0 = '1.0';\n/**\n * Indicates protocol version 1.1\n */\nVersions.V1_1 = '1.1';\n/**\n * Indicates protocol version 1.2\n */\nVersions.V1_2 = '1.2';\n/**\n * @internal\n */\nVersions.default = new Versions([\n    Versions.V1_2,\n    Versions.V1_1,\n    Versions.V1_0,\n]);\n//# sourceMappingURL=versions.js.map","/**\n * @internal\n */\nexport function augmentWebsocket(webSocket, debug) {\n    webSocket.terminate = function () {\n        const noOp = () => { };\n        // set all callbacks to no op\n        this.onerror = noOp;\n        this.onmessage = noOp;\n        this.onopen = noOp;\n        const ts = new Date();\n        const id = Math.random().toString().substring(2, 8); // A simulated id\n        const origOnClose = this.onclose;\n        // Track delay in actual closure of the socket\n        this.onclose = closeEvent => {\n            const delay = new Date().getTime() - ts.getTime();\n            debug(`Discarded socket (#${id})  closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`);\n        };\n        this.close();\n        origOnClose?.call(webSocket, {\n            code: 4001,\n            reason: `Quick discarding socket (#${id}) without waiting for the shutdown sequence.`,\n            wasClean: false,\n        });\n    };\n}\n//# sourceMappingURL=augment-websocket.js.map","import { BYTE } from './byte.js';\nimport { FrameImpl } from './frame-impl.js';\nimport { Parser } from './parser.js';\nimport { StompSocketState, } from './types.js';\nimport { Versions } from './versions.js';\nimport { augmentWebsocket } from './augment-websocket.js';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n    constructor(_client, _webSocket, config) {\n        this._client = _client;\n        this._webSocket = _webSocket;\n        this._connected = false;\n        this._serverFrameHandlers = {\n            // [CONNECTED Frame](https://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            CONNECTED: frame => {\n                this.debug(`connected to server ${frame.headers.server}`);\n                this._connected = true;\n                this._connectedVersion = frame.headers.version;\n                // STOMP version 1.2 needs header values to be escaped\n                if (this._connectedVersion === Versions.V1_2) {\n                    this._escapeHeaderValues = true;\n                }\n                this._setupHeartbeat(frame.headers);\n                this.onConnect(frame);\n            },\n            // [MESSAGE Frame](https://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            MESSAGE: frame => {\n                // the callback is registered when the client calls\n                // `subscribe()`.\n                // If there is no registered subscription for the received message,\n                // the default `onUnhandledMessage` callback is used that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](https://www.rabbitmq.com/stomp.html)).\n                const subscription = frame.headers.subscription;\n                const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n                // bless the frame to be a Message\n                const message = frame;\n                const client = this;\n                const messageId = this._connectedVersion === Versions.V1_2\n                    ? message.headers.ack\n                    : message.headers['message-id'];\n                // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n                message.ack = (headers = {}) => {\n                    return client.ack(messageId, subscription, headers);\n                };\n                message.nack = (headers = {}) => {\n                    return client.nack(messageId, subscription, headers);\n                };\n                onReceive(message);\n            },\n            // [RECEIPT Frame](https://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            RECEIPT: frame => {\n                const callback = this._receiptWatchers[frame.headers['receipt-id']];\n                if (callback) {\n                    callback(frame);\n                    // Server will acknowledge only once, remove the callback\n                    delete this._receiptWatchers[frame.headers['receipt-id']];\n                }\n                else {\n                    this.onUnhandledReceipt(frame);\n                }\n            },\n            // [ERROR Frame](https://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            ERROR: frame => {\n                this.onStompError(frame);\n            },\n        };\n        // used to index subscribers\n        this._counter = 0;\n        // subscription callbacks indexed by subscriber's ID\n        this._subscriptions = {};\n        // receipt-watchers indexed by receipts-ids\n        this._receiptWatchers = {};\n        this._partialData = '';\n        this._escapeHeaderValues = false;\n        this._lastServerActivityTS = Date.now();\n        this.debug = config.debug;\n        this.stompVersions = config.stompVersions;\n        this.connectHeaders = config.connectHeaders;\n        this.disconnectHeaders = config.disconnectHeaders;\n        this.heartbeatIncoming = config.heartbeatIncoming;\n        this.heartbeatOutgoing = config.heartbeatOutgoing;\n        this.splitLargeFrames = config.splitLargeFrames;\n        this.maxWebSocketChunkSize = config.maxWebSocketChunkSize;\n        this.forceBinaryWSFrames = config.forceBinaryWSFrames;\n        this.logRawCommunication = config.logRawCommunication;\n        this.appendMissingNULLonIncoming = config.appendMissingNULLonIncoming;\n        this.discardWebsocketOnCommFailure = config.discardWebsocketOnCommFailure;\n        this.onConnect = config.onConnect;\n        this.onDisconnect = config.onDisconnect;\n        this.onStompError = config.onStompError;\n        this.onWebSocketClose = config.onWebSocketClose;\n        this.onWebSocketError = config.onWebSocketError;\n        this.onUnhandledMessage = config.onUnhandledMessage;\n        this.onUnhandledReceipt = config.onUnhandledReceipt;\n        this.onUnhandledFrame = config.onUnhandledFrame;\n    }\n    get connectedVersion() {\n        return this._connectedVersion;\n    }\n    get connected() {\n        return this._connected;\n    }\n    start() {\n        const parser = new Parser(\n        // On Frame\n        rawFrame => {\n            const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n            // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n            if (!this.logRawCommunication) {\n                this.debug(`<<< ${frame}`);\n            }\n            const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n            serverFrameHandler(frame);\n        }, \n        // On Incoming Ping\n        () => {\n            this.debug('<<< PONG');\n        });\n        this._webSocket.onmessage = (evt) => {\n            this.debug('Received data');\n            this._lastServerActivityTS = Date.now();\n            if (this.logRawCommunication) {\n                const rawChunkAsString = evt.data instanceof ArrayBuffer\n                    ? new TextDecoder().decode(evt.data)\n                    : evt.data;\n                this.debug(`<<< ${rawChunkAsString}`);\n            }\n            parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n        };\n        this._webSocket.onclose = (closeEvent) => {\n            this.debug(`Connection closed to ${this._webSocket.url}`);\n            this._cleanUp();\n            this.onWebSocketClose(closeEvent);\n        };\n        this._webSocket.onerror = (errorEvent) => {\n            this.onWebSocketError(errorEvent);\n        };\n        this._webSocket.onopen = () => {\n            // Clone before updating\n            const connectHeaders = Object.assign({}, this.connectHeaders);\n            this.debug('Web Socket Opened...');\n            connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n            connectHeaders['heart-beat'] = [\n                this.heartbeatOutgoing,\n                this.heartbeatIncoming,\n            ].join(',');\n            this._transmit({ command: 'CONNECT', headers: connectHeaders });\n        };\n    }\n    _setupHeartbeat(headers) {\n        if (headers.version !== Versions.V1_1 &&\n            headers.version !== Versions.V1_2) {\n            return;\n        }\n        // It is valid for the server to not send this header\n        // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n        if (!headers['heart-beat']) {\n            return;\n        }\n        // heart-beat header received from the server looks like:\n        //\n        //     heart-beat: sx, sy\n        const [serverOutgoing, serverIncoming] = headers['heart-beat']\n            .split(',')\n            .map((v) => parseInt(v, 10));\n        if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n            const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n            this.debug(`send PING every ${ttl}ms`);\n            this._pinger = setInterval(() => {\n                if (this._webSocket.readyState === StompSocketState.OPEN) {\n                    this._webSocket.send(BYTE.LF);\n                    this.debug('>>> PING');\n                }\n            }, ttl);\n        }\n        if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n            const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n            this.debug(`check PONG every ${ttl}ms`);\n            this._ponger = setInterval(() => {\n                const delta = Date.now() - this._lastServerActivityTS;\n                // We wait twice the TTL to be flexible on window's setInterval calls\n                if (delta > ttl * 2) {\n                    this.debug(`did not receive server activity for the last ${delta}ms`);\n                    this._closeOrDiscardWebsocket();\n                }\n            }, ttl);\n        }\n    }\n    _closeOrDiscardWebsocket() {\n        if (this.discardWebsocketOnCommFailure) {\n            this.debug('Discarding websocket, the underlying socket may linger for a while');\n            this.discardWebsocket();\n        }\n        else {\n            this.debug('Issuing close on the websocket');\n            this._closeWebsocket();\n        }\n    }\n    forceDisconnect() {\n        if (this._webSocket) {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeOrDiscardWebsocket();\n            }\n        }\n    }\n    _closeWebsocket() {\n        this._webSocket.onmessage = () => { }; // ignore messages\n        this._webSocket.close();\n    }\n    discardWebsocket() {\n        if (typeof this._webSocket.terminate !== 'function') {\n            augmentWebsocket(this._webSocket, (msg) => this.debug(msg));\n        }\n        // @ts-ignore - this method will be there at this stage\n        this._webSocket.terminate();\n    }\n    _transmit(params) {\n        const { command, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const frame = new FrameImpl({\n            command,\n            headers,\n            body,\n            binaryBody,\n            escapeHeaderValues: this._escapeHeaderValues,\n            skipContentLengthHeader,\n        });\n        let rawChunk = frame.serialize();\n        if (this.logRawCommunication) {\n            this.debug(`>>> ${rawChunk}`);\n        }\n        else {\n            this.debug(`>>> ${frame}`);\n        }\n        if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n            rawChunk = new TextEncoder().encode(rawChunk);\n        }\n        if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n            this._webSocket.send(rawChunk);\n        }\n        else {\n            let out = rawChunk;\n            while (out.length > 0) {\n                const chunk = out.substring(0, this.maxWebSocketChunkSize);\n                out = out.substring(this.maxWebSocketChunkSize);\n                this._webSocket.send(chunk);\n                this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n            }\n        }\n    }\n    dispose() {\n        if (this.connected) {\n            try {\n                // clone before updating\n                const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n                if (!disconnectHeaders.receipt) {\n                    disconnectHeaders.receipt = `close-${this._counter++}`;\n                }\n                this.watchForReceipt(disconnectHeaders.receipt, frame => {\n                    this._closeWebsocket();\n                    this._cleanUp();\n                    this.onDisconnect(frame);\n                });\n                this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n            }\n            catch (error) {\n                this.debug(`Ignoring error during disconnect ${error}`);\n            }\n        }\n        else {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeWebsocket();\n            }\n        }\n    }\n    _cleanUp() {\n        this._connected = false;\n        if (this._pinger) {\n            clearInterval(this._pinger);\n            this._pinger = undefined;\n        }\n        if (this._ponger) {\n            clearInterval(this._ponger);\n            this._ponger = undefined;\n        }\n    }\n    publish(params) {\n        const { destination, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const hdrs = Object.assign({ destination }, headers);\n        this._transmit({\n            command: 'SEND',\n            headers: hdrs,\n            body,\n            binaryBody,\n            skipContentLengthHeader,\n        });\n    }\n    watchForReceipt(receiptId, callback) {\n        this._receiptWatchers[receiptId] = callback;\n    }\n    subscribe(destination, callback, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (!headers.id) {\n            headers.id = `sub-${this._counter++}`;\n        }\n        headers.destination = destination;\n        this._subscriptions[headers.id] = callback;\n        this._transmit({ command: 'SUBSCRIBE', headers });\n        const client = this;\n        return {\n            id: headers.id,\n            unsubscribe(hdrs) {\n                return client.unsubscribe(headers.id, hdrs);\n            },\n        };\n    }\n    unsubscribe(id, headers = {}) {\n        headers = Object.assign({}, headers);\n        delete this._subscriptions[id];\n        headers.id = id;\n        this._transmit({ command: 'UNSUBSCRIBE', headers });\n    }\n    begin(transactionId) {\n        const txId = transactionId || `tx-${this._counter++}`;\n        this._transmit({\n            command: 'BEGIN',\n            headers: {\n                transaction: txId,\n            },\n        });\n        const client = this;\n        return {\n            id: txId,\n            commit() {\n                client.commit(txId);\n            },\n            abort() {\n                client.abort(txId);\n            },\n        };\n    }\n    commit(transactionId) {\n        this._transmit({\n            command: 'COMMIT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    abort(transactionId) {\n        this._transmit({\n            command: 'ABORT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    ack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        this._transmit({ command: 'ACK', headers });\n    }\n    nack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        return this._transmit({ command: 'NACK', headers });\n    }\n}\n//# sourceMappingURL=stomp-handler.js.map","import { StompHandler } from './stomp-handler.js';\nimport { ActivationState, StompSocketState, } from './types.js';\nimport { Versions } from './versions.js';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n    /**\n     * Create an instance.\n     */\n    constructor(conf = {}) {\n        /**\n         * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\n         *\n         * Example:\n         * ```javascript\n         *        // Try only versions 1.1 and 1.0\n         *        client.stompVersions = new Versions(['1.1', '1.0'])\n         * ```\n         */\n        this.stompVersions = Versions.default;\n        /**\n         * Will retry if Stomp connection is not established in specified milliseconds.\n         * Default 0, which switches off automatic reconnection.\n         */\n        this.connectionTimeout = 0;\n        /**\n         *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n         */\n        this.reconnectDelay = 5000;\n        /**\n         * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatIncoming = 10000;\n        /**\n         * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatOutgoing = 10000;\n        /**\n         * This switches on a non-standard behavior while sending WebSocket packets.\n         * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n         * Only Java Spring brokers seem to support this mode.\n         *\n         * WebSockets, by itself, split large (text) packets,\n         * so it is not needed with a truly compliant STOMP/WebSocket broker.\n         * Setting it for such a broker will cause large messages to fail.\n         *\n         * `false` by default.\n         *\n         * Binary frames are never split.\n         */\n        this.splitLargeFrames = false;\n        /**\n         * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n         * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n         */\n        this.maxWebSocketChunkSize = 8 * 1024;\n        /**\n         * Usually the\n         * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n         * is automatically decided by type of the payload.\n         * Default is `false`, which should work with all compliant brokers.\n         *\n         * Set this flag to force binary frames.\n         */\n        this.forceBinaryWSFrames = false;\n        /**\n         * A bug in ReactNative chops a string on occurrence of a NULL.\n         * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n         * This makes incoming WebSocket messages invalid STOMP packets.\n         * Setting this flag attempts to reverse the damage by appending a NULL.\n         * If the broker splits a large message into multiple WebSocket messages,\n         * this flag will cause data loss and abnormal termination of connection.\n         *\n         * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n         */\n        this.appendMissingNULLonIncoming = false;\n        /**\n         * Browsers do not immediately close WebSockets when `.close` is issued.\n         * This may cause reconnection to take a significantly long time in case\n         *  of some types of failures.\n         * In case of incoming heartbeat failure, this experimental flag instructs\n         * the library to discard the socket immediately\n         * (even before it is actually closed).\n         */\n        this.discardWebsocketOnCommFailure = false;\n        /**\n         * Activation state.\n         *\n         * It will usually be ACTIVE or INACTIVE.\n         * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n         */\n        this.state = ActivationState.INACTIVE;\n        // No op callbacks\n        const noOp = () => { };\n        this.debug = noOp;\n        this.beforeConnect = noOp;\n        this.onConnect = noOp;\n        this.onDisconnect = noOp;\n        this.onUnhandledMessage = noOp;\n        this.onUnhandledReceipt = noOp;\n        this.onUnhandledFrame = noOp;\n        this.onStompError = noOp;\n        this.onWebSocketClose = noOp;\n        this.onWebSocketError = noOp;\n        this.logRawCommunication = false;\n        this.onChangeState = noOp;\n        // These parameters would typically get proper values before connect is called\n        this.connectHeaders = {};\n        this._disconnectHeaders = {};\n        // Apply configuration\n        this.configure(conf);\n    }\n    /**\n     * Underlying WebSocket instance, READONLY.\n     */\n    get webSocket() {\n        return this._stompHandler?._webSocket;\n    }\n    /**\n     * Disconnection headers.\n     */\n    get disconnectHeaders() {\n        return this._disconnectHeaders;\n    }\n    set disconnectHeaders(value) {\n        this._disconnectHeaders = value;\n        if (this._stompHandler) {\n            this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n        }\n    }\n    /**\n     * `true` if there is an active connection to STOMP Broker\n     */\n    get connected() {\n        return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * version of STOMP protocol negotiated with the server, READONLY\n     */\n    get connectedVersion() {\n        return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * if the client is active (connected or going to reconnect)\n     */\n    get active() {\n        return this.state === ActivationState.ACTIVE;\n    }\n    _changeState(state) {\n        this.state = state;\n        this.onChangeState(state);\n    }\n    /**\n     * Update configuration.\n     */\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect.\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n    activate() {\n        const _activate = () => {\n            if (this.active) {\n                this.debug('Already ACTIVE, ignoring request to activate');\n                return;\n            }\n            this._changeState(ActivationState.ACTIVE);\n            this._connect();\n        };\n        // if it is deactivating, wait for it to complete before activating.\n        if (this.state === ActivationState.DEACTIVATING) {\n            this.debug('Waiting for deactivation to finish before activating');\n            this.deactivate().then(() => {\n                _activate();\n            });\n        }\n        else {\n            _activate();\n        }\n    }\n    async _connect() {\n        await this.beforeConnect();\n        if (this._stompHandler) {\n            this.debug('There is already a stompHandler, skipping the call to connect');\n            return;\n        }\n        if (!this.active) {\n            this.debug('Client has been marked inactive, will not attempt to connect');\n            return;\n        }\n        // setup connection watcher\n        if (this.connectionTimeout > 0) {\n            // clear first\n            if (this._connectionWatcher) {\n                clearTimeout(this._connectionWatcher);\n            }\n            this._connectionWatcher = setTimeout(() => {\n                if (this.connected) {\n                    return;\n                }\n                // Connection not established, close the underlying socket\n                // a reconnection will be attempted\n                this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n                this.forceDisconnect();\n            }, this.connectionTimeout);\n        }\n        this.debug('Opening Web Socket...');\n        // Get the actual WebSocket (or a similar object)\n        const webSocket = this._createWebSocket();\n        this._stompHandler = new StompHandler(this, webSocket, {\n            debug: this.debug,\n            stompVersions: this.stompVersions,\n            connectHeaders: this.connectHeaders,\n            disconnectHeaders: this._disconnectHeaders,\n            heartbeatIncoming: this.heartbeatIncoming,\n            heartbeatOutgoing: this.heartbeatOutgoing,\n            splitLargeFrames: this.splitLargeFrames,\n            maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n            forceBinaryWSFrames: this.forceBinaryWSFrames,\n            logRawCommunication: this.logRawCommunication,\n            appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n            discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n            onConnect: frame => {\n                // Successfully connected, stop the connection watcher\n                if (this._connectionWatcher) {\n                    clearTimeout(this._connectionWatcher);\n                    this._connectionWatcher = undefined;\n                }\n                if (!this.active) {\n                    this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                    this._disposeStompHandler();\n                    return;\n                }\n                this.onConnect(frame);\n            },\n            onDisconnect: frame => {\n                this.onDisconnect(frame);\n            },\n            onStompError: frame => {\n                this.onStompError(frame);\n            },\n            onWebSocketClose: evt => {\n                this._stompHandler = undefined; // a new one will be created in case of a reconnect\n                if (this.state === ActivationState.DEACTIVATING) {\n                    // Mark deactivation complete\n                    this._changeState(ActivationState.INACTIVE);\n                }\n                // The callback is called before attempting to reconnect, this would allow the client\n                // to be `deactivated` in the callback.\n                this.onWebSocketClose(evt);\n                if (this.active) {\n                    this._schedule_reconnect();\n                }\n            },\n            onWebSocketError: evt => {\n                this.onWebSocketError(evt);\n            },\n            onUnhandledMessage: message => {\n                this.onUnhandledMessage(message);\n            },\n            onUnhandledReceipt: frame => {\n                this.onUnhandledReceipt(frame);\n            },\n            onUnhandledFrame: frame => {\n                this.onUnhandledFrame(frame);\n            },\n        });\n        this._stompHandler.start();\n    }\n    _createWebSocket() {\n        let webSocket;\n        if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n        }\n        else if (this.brokerURL) {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n        }\n        else {\n            throw new Error('Either brokerURL or webSocketFactory must be provided');\n        }\n        webSocket.binaryType = 'arraybuffer';\n        return webSocket;\n    }\n    _schedule_reconnect() {\n        if (this.reconnectDelay > 0) {\n            this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n            this._reconnector = setTimeout(() => {\n                this._connect();\n            }, this.reconnectDelay);\n        }\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\n     *\n     * This call is async. It will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after the underlying websocket is properly disposed of.\n     *\n     * It is not an error to invoke this method more than once.\n     * Each of those would resolve on completion of deactivation.\n     *\n     * To reactivate, you can call [Client#activate]{@link Client#activate}.\n     *\n     * Experimental: pass `force: true` to immediately discard the underlying connection.\n     * This mode will skip both the STOMP and the Websocket shutdown sequences.\n     * In some cases, browsers take a long time in the Websocket shutdown\n     * if the underlying connection had gone stale.\n     * Using this mode can speed up.\n     * When this mode is used, the actual Websocket may linger for a while\n     * and the broker may not realize that the connection is no longer in use.\n     *\n     * It is possible to invoke this method initially without the `force` option\n     * and subsequently, say after a wait, with the `force` option.\n     */\n    async deactivate(options = {}) {\n        const force = options.force || false;\n        const needToDispose = this.active;\n        let retPromise;\n        if (this.state === ActivationState.INACTIVE) {\n            this.debug(`Already INACTIVE, nothing more to do`);\n            return Promise.resolve();\n        }\n        this._changeState(ActivationState.DEACTIVATING);\n        // Clear if a reconnection was scheduled\n        if (this._reconnector) {\n            clearTimeout(this._reconnector);\n            this._reconnector = undefined;\n        }\n        if (this._stompHandler &&\n            // @ts-ignore - if there is a _stompHandler, there is the webSocket\n            this.webSocket.readyState !== StompSocketState.CLOSED) {\n            const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\n            // we need to wait for the underlying websocket to close\n            retPromise = new Promise((resolve, reject) => {\n                // @ts-ignore - there is a _stompHandler\n                this._stompHandler.onWebSocketClose = evt => {\n                    origOnWebSocketClose(evt);\n                    resolve();\n                };\n            });\n        }\n        else {\n            // indicate that auto reconnect loop should terminate\n            this._changeState(ActivationState.INACTIVE);\n            return Promise.resolve();\n        }\n        if (force) {\n            this._stompHandler?.discardWebsocket();\n        }\n        else if (needToDispose) {\n            this._disposeStompHandler();\n        }\n        return retPromise;\n    }\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n    forceDisconnect() {\n        if (this._stompHandler) {\n            this._stompHandler.forceDisconnect();\n        }\n    }\n    _disposeStompHandler() {\n        // Dispose STOMP Handler\n        if (this._stompHandler) {\n            this._stompHandler.dispose();\n        }\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body, use `binaryBody` parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages, `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect\n     * if the message body has NULL octet(s) and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    publish(params) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.publish(params);\n    }\n    _checkConnection() {\n        if (!this.connected) {\n            throw new TypeError('There is no underlying STOMP connection');\n        }\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use.\n     * Typically, a sequence, a UUID, a random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based on the value of the receipt-id.\n     *\n     * This method allows watching for a receipt and invoking the callback\n     *  when the corresponding receipt has been received.\n     *\n     * The actual {@link IFrame} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n    watchForReceipt(receiptId, callback) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each\n     * received message with the {@link IMessage} as argument.\n     *\n     * Note: The library will generate a unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the `headers` argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n    subscribe(destination, callback, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n    unsubscribe(id, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n    begin(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n    commit(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n    abort(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.abort(transactionId);\n    }\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    ack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    nack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n}\n//# sourceMappingURL=client.js.map","/**\n * Possible states for the RxStomp\n *\n * Part of `@stomp/rx-stomp`\n */\nexport var RxStompState;\n(function (RxStompState) {\n    RxStompState[RxStompState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    RxStompState[RxStompState[\"OPEN\"] = 1] = \"OPEN\";\n    RxStompState[RxStompState[\"CLOSING\"] = 2] = \"CLOSING\";\n    RxStompState[RxStompState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(RxStompState = RxStompState || (RxStompState = {}));\n//# sourceMappingURL=rx-stomp-state.js.map","import { BehaviorSubject, filter, firstValueFrom, Observable, share, Subject, take, } from 'rxjs';\nimport { Client, } from '@stomp/stompjs';\nimport { RxStompState } from './rx-stomp-state.js';\n/**\n * This is the main Stomp Client.\n * Typically, you will create an instance of this to connect to the STOMP broker.\n *\n * This wraps an instance of [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n * {@link Client}.\n *\n * The key difference is that it exposes operations as RxJS Observables.\n * For example, when a STOMP endpoint is subscribed it returns an Observable\n * that will stream all received messages.\n *\n * With exception to beforeConnect, functionality related to all callbacks in\n * [@stomp/stompjs Client]{@link Client}\n * is exposed as Observables/Subjects/BehaviorSubjects.\n *\n * RxStomp also tries to transparently handle connection failures.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStomp {\n    /**\n     * Instance of actual\n     * [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n     * {@link Client}.\n     *\n     * **Be careful in calling methods on it directly - you may get unintended consequences.**\n     */\n    get stompClient() {\n        return this._stompClient;\n    }\n    /**\n     * Constructor\n     *\n     * @param stompClient optionally inject the\n     * [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n     * {@link Client} to wrap. If this is not provided, a client will\n     * be constructed internally.\n     */\n    constructor(stompClient) {\n        /**\n         * Internal array to hold locally queued messages when STOMP broker is not connected.\n         */\n        this._queuedMessages = [];\n        const client = stompClient ? stompClient : new Client();\n        this._stompClient = client;\n        const noOp = () => { };\n        // Before connect is no op by default\n        this._beforeConnect = noOp;\n        // Correlate errors is falsey op by default\n        this._correlateErrors = () => undefined;\n        // debug is no-op by default\n        this._debug = noOp;\n        // Initial state is CLOSED\n        this._connectionStatePre$ = new BehaviorSubject(RxStompState.CLOSED);\n        this._connectedPre$ = this._connectionStatePre$.pipe(filter((currentState) => {\n            return currentState === RxStompState.OPEN;\n        }));\n        // Initial state is CLOSED\n        this.connectionState$ = new BehaviorSubject(RxStompState.CLOSED);\n        this.connected$ = this.connectionState$.pipe(filter((currentState) => {\n            return currentState === RxStompState.OPEN;\n        }));\n        // Setup sending queuedMessages\n        this.connected$.subscribe(() => {\n            this._sendQueuedMessages();\n        });\n        this._serverHeadersBehaviourSubject$ =\n            new BehaviorSubject(null);\n        this.serverHeaders$ = this._serverHeadersBehaviourSubject$.pipe(filter((headers) => {\n            return headers !== null;\n        }));\n        this.stompErrors$ = new Subject();\n        this.unhandledMessage$ = new Subject();\n        this.unhandledReceipts$ = new Subject();\n        this.unhandledFrame$ = new Subject();\n        this.webSocketErrors$ = new Subject();\n    }\n    /**\n     * Set configuration. This method may be called multiple times.\n     * Each call will add to the existing configuration.\n     *\n     * Example:\n     *\n     * ```javascript\n     *        const rxStomp = new RxStomp();\n     *        rxStomp.configure({\n     *          brokerURL: 'ws://127.0.0.1:15674/ws',\n     *          connectHeaders: {\n     *            login: 'guest',\n     *            passcode: 'guest'\n     *          },\n     *          heartbeatIncoming: 0,\n     *          heartbeatOutgoing: 20000,\n     *          reconnectDelay: 200,\n     *          debug: (msg: string): void => {\n     *            console.log(new Date(), msg);\n     *          }\n     *        });\n     *        rxStomp.activate();\n     * ```\n     *\n     * Maps to: [Client#configure]{@link Client#configure}\n     */\n    configure(rxStompConfig) {\n        const stompConfig = Object.assign({}, rxStompConfig);\n        if (stompConfig.beforeConnect) {\n            this._beforeConnect = stompConfig.beforeConnect;\n            delete stompConfig.beforeConnect;\n        }\n        if (stompConfig.correlateErrors) {\n            this._correlateErrors = stompConfig.correlateErrors;\n            delete stompConfig.correlateErrors;\n        }\n        // RxStompConfig has subset of StompConfig fields\n        this._stompClient.configure(stompConfig);\n        if (stompConfig.debug) {\n            this._debug = stompConfig.debug;\n        }\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [RxStompConfig#reconnectDelay]{@link RxStompConfig#reconnectDelay},\n     * it will keep trying to reconnect.\n     *\n     * Call [RxStomp#deactivate]{@link RxStomp#deactivate} to disconnect and stop reconnection attempts.\n     *\n     * Maps to: [Client#activate]{@link Client#activate}\n     */\n    activate() {\n        this._stompClient.configure({\n            beforeConnect: async () => {\n                this._changeState(RxStompState.CONNECTING);\n                // Call handler\n                await this._beforeConnect(this);\n            },\n            onConnect: (frame) => {\n                this._serverHeadersBehaviourSubject$.next(frame.headers);\n                // Indicate our connected state to observers\n                this._changeState(RxStompState.OPEN);\n            },\n            onStompError: (frame) => {\n                // Trigger the frame subject\n                this.stompErrors$.next(frame);\n            },\n            onWebSocketClose: () => {\n                this._changeState(RxStompState.CLOSED);\n            },\n            onUnhandledMessage: (message) => {\n                this.unhandledMessage$.next(message);\n            },\n            onUnhandledReceipt: (frame) => {\n                this.unhandledReceipts$.next(frame);\n            },\n            onUnhandledFrame: (frame) => {\n                this.unhandledFrame$.next(frame);\n            },\n            onWebSocketError: (evt) => {\n                this.webSocketErrors$.next(evt);\n            },\n        });\n        // Attempt connection\n        this._stompClient.activate();\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if the underlying STOMP connection was connected.\n     *\n     * To reactivate, you can call [RxStomp#activate]{@link RxStomp#activate}.\n     *\n     * This call is async. It will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after the underlying websocket is properly disposed of.\n     *\n     * Experimental: Since version 2.0.0, pass `force: true` to immediately discard the underlying connection.\n     * See [Client#deactivate]{@link Client#deactivate} for details.\n     *\n     * Maps to: [Client#deactivate]{@link Client#deactivate}\n     */\n    async deactivate(options = {}) {\n        this._changeState(RxStompState.CLOSING);\n        // The promise will be resolved immediately if there is no active connection\n        // otherwise, after it has successfully disconnected.\n        await this._stompClient.deactivate(options);\n        this._changeState(RxStompState.CLOSED);\n    }\n    /**\n     * It will return `true` if STOMP broker is connected and `false` otherwise.\n     */\n    connected() {\n        return this.connectionState$.getValue() === RxStompState.OPEN;\n    }\n    /**\n     * If the client is active (connected or going to reconnect).\n     *\n     *  Maps to: [Client#active]{@link Client#active}\n     */\n    get active() {\n        return this.stompClient.active;\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body, use binaryBody parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * The ` content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages, `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect if the message body has NULL octet(s)\n     * and `content-length` header is missing.\n     *\n     * The message will get locally queued if the STOMP broker is not connected. It will attempt to\n     * publish queued messages as soon as the broker gets connected.\n     * If you do not want that behavior,\n     * please set [retryIfDisconnected]{@link IRxStompPublishParams#retryIfDisconnected} to `false`\n     * in the parameters.\n     * When `false`, this function will raise an error if a message could not be sent immediately.\n     *\n     * Maps to: [Client#publish]{@link Client#publish}\n     *\n     * See: {@link IRxStompPublishParams} and {@link IPublishParams}\n     *\n     * ```javascript\n     *        rxStomp.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        rxStomp.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        rxStomp.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        rxStomp.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    publish(parameters) {\n        // retry behaviour is defaulted to true\n        const shouldRetry = parameters.retryIfDisconnected == null\n            ? true\n            : parameters.retryIfDisconnected;\n        if (this.connected()) {\n            this._stompClient.publish(parameters);\n        }\n        else if (shouldRetry) {\n            this._debug(`Not connected, queueing`);\n            this._queuedMessages.push(parameters);\n        }\n        else {\n            throw new Error('Cannot publish while broker is not connected');\n        }\n    }\n    /** It will send queued messages. */\n    _sendQueuedMessages() {\n        const queuedMessages = this._queuedMessages;\n        this._queuedMessages = [];\n        if (queuedMessages.length === 0) {\n            return;\n        }\n        this._debug(`Will try sending  ${queuedMessages.length} queued message(s)`);\n        for (const queuedMessage of queuedMessages) {\n            this._debug(`Attempting to send ${queuedMessage}`);\n            this.publish(queuedMessage);\n        }\n    }\n    watch(opts, headers = {}) {\n        const defaults = {\n            subHeaders: {},\n            unsubHeaders: {},\n            subscribeOnlyOnce: false,\n        };\n        let params;\n        if (typeof opts === 'string') {\n            params = Object.assign({}, defaults, {\n                destination: opts,\n                subHeaders: headers,\n            });\n        }\n        else {\n            params = Object.assign({}, defaults, opts);\n        }\n        /* Well, the logic is complicated but works beautifully. RxJS is indeed wonderful.\n         *\n         * We need to activate the underlying subscription immediately if Stomp is connected. If not, it should\n         * subscribe when it gets next connected. Further, it should re-establish the subscription whenever Stomp\n         * successfully reconnects.\n         *\n         * Actual implementation is simple, we filter the BehaviourSubject 'state' so that we can trigger whenever Stomp is\n         * connected. Since 'state' is a BehaviourSubject, if Stomp is already connected, it will immediately trigger.\n         *\n         * The observable that we return to the caller remains the same across all reconnects, so no special handling needed at\n         * the message subscriber.\n         */\n        this._debug(`Request to subscribe ${params.destination}`);\n        const coldObservable = Observable.create((messages) => {\n            /*\n             * These variables will be used as part of the closure and work their magic during unsubscribe\n             */\n            let stompSubscription; // Stomp\n            let stompConnectedSubscription; // RxJS\n            let connectedPre$ = this._connectedPre$;\n            if (params.subscribeOnlyOnce) {\n                connectedPre$ = connectedPre$.pipe(take(1));\n            }\n            const stompErrorsSubscription = this.stompErrors$.subscribe((error) => {\n                const correlatedDestination = this._correlateErrors(error);\n                if (correlatedDestination === params.destination) {\n                    messages.error(error);\n                }\n            });\n            stompConnectedSubscription = connectedPre$.subscribe(() => {\n                this._debug(`Will subscribe to ${params.destination}`);\n                let subHeaders = params.subHeaders;\n                if (typeof subHeaders === 'function') {\n                    subHeaders = subHeaders();\n                }\n                stompSubscription = this._stompClient.subscribe(params.destination, (message) => {\n                    messages.next(message);\n                }, subHeaders);\n            });\n            return () => {\n                /* cleanup function, it will be called when no subscribers are left */\n                this._debug(`Stop watching connection state (for ${params.destination})`);\n                stompConnectedSubscription.unsubscribe();\n                stompErrorsSubscription.unsubscribe();\n                if (this.connected()) {\n                    this._debug(`Will unsubscribe from ${params.destination} at Stomp`);\n                    let unsubHeaders = params.unsubHeaders;\n                    if (typeof unsubHeaders === 'function') {\n                        unsubHeaders = unsubHeaders();\n                    }\n                    stompSubscription.unsubscribe(unsubHeaders);\n                }\n                else {\n                    this._debug(`Stomp not connected, no need to unsubscribe from ${params.destination} at Stomp`);\n                }\n            };\n        });\n        /**\n         * Important - convert it to hot Observable - otherwise, if the user code subscribes\n         * to this observable twice, it will subscribe twice to Stomp broker. (This was happening in the current example).\n         * A long but good explanatory article at https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339\n         */\n        return coldObservable.pipe(share());\n    }\n    /**\n     * **Deprecated** Please use {@link asyncReceipt}.\n     */\n    watchForReceipt(receiptId, callback) {\n        this._stompClient.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use. Typically, a sequence, a UUID, a\n     * random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based on the value of the receipt-id.\n     *\n     * This method allows watching for a receipt and invoking the callback\n     * when the corresponding receipt has been received.\n     *\n     * The promise will yield the actual {@link IFrame}.\n     *\n     * Example:\n     * ```javascript\n     *        // Publishing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});\n     *        await rxStomp.asyncReceipt(receiptId);; // it yields the actual Frame\n     * ```\n     *\n     * Maps to: [Client#watchForReceipt]{@link Client#watchForReceipt}\n     */\n    asyncReceipt(receiptId) {\n        return firstValueFrom(this.unhandledReceipts$.pipe(filter(frame => frame.headers['receipt-id'] === receiptId)));\n    }\n    _changeState(state) {\n        this._connectionStatePre$.next(state);\n        this.connectionState$.next(state);\n    }\n}\n//# sourceMappingURL=rx-stomp.js.map","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { RxStompState } from '@stomp/rx-stomp'\n\nexport enum EnumTopic {\n\tBPMN = '/user/topic/bpmn',\n\tEVIDENCE = 'evidence',\n\tUSER_LOCATION = '/topic/user-location',\n\tCOMMON_BROADCAST = '/topic/common-broadcast',\n\tCONFIG = '/topic/config',\n\tBPMN_EVENT = '/user/topic/bpmn-event',\n\tDUTY_SCHEDULE_NOTIFY = '/topic/duty-schedule-notify',\n}\n\nexport enum EnumPublishDestination {\n\tHEARTBEAT = 'hearbeat',\n}\n\nexport const InformWebsocketText = {\n\t[RxStompState.CONNECTING]: '与服务器断开连接，正在连接中',\n\t[RxStompState.CLOSED]: '与服务器断开连接',\n\t[RxStompState.OPEN]: '已经连接到服务器',\n\t[RxStompState.CLOSING]: '与服务器断开连接',\n}\nexport const InformWebsocketType = {\n\t[RxStompState.CONNECTING]: 'error',\n\t[RxStompState.CLOSED]: 'error',\n\t[RxStompState.OPEN]: 'success',\n\t[RxStompState.CLOSING]: 'error',\n}\n","export class WebscoketConfig {\n\ttimeout = 5000\n\treconnectDelay = 5000\n\theartbeatTime = 15000\n\tbaseUrl = `${location.protocol.startsWith('https') ? 'wss' : 'ws'}://${location.host}`\n\turl = '/api/auth/ws/endpoint'\n}\n","import { RxStomp } from '@stomp/rx-stomp'\nimport { from, interval, Subject, Subscription, timeout } from 'rxjs'\nimport { v4 } from 'uuid'\nimport { EnumTopic, EnumPublishDestination, InformWebsocketType, InformWebsocketText } from './enum'\nimport { TopicHandlers, WebsocketConnectionState, TopicHandler } from './type'\nimport { WebscoketConfig } from './config'\n\nexport class WebSocketService {\n\tprivate rxStomp: RxStomp = new RxStomp()\n\tprivate config = new WebscoketConfig()\n\tprivate topicHandlers: TopicHandlers = {}\n\tprivate topicSubscrition: Partial<Record<EnumTopic, Subscription>> = {}\n\tprivate disconnect$ = new Subject()\n\tpublic readonly connectionState$ = new Subject<WebsocketConnectionState>()\n\n\tinit(config: Partial<WebscoketConfig>) {\n\t\tfor (const key in config) {\n\t\t\t//@ts-ignore\n\t\t\tthis.config[key] = config[key]\n\t\t}\n\t}\n\n\tconnect(token: string) {\n\t\tthis.configure(token)\n\t\tthis.rxStomp.activate()\n\t\tthis.heartbeatSubscribe()\n\t\tthis.stateSubscribe()\n\t}\n\n\tdisconnect() {\n\t\tthis.rxStomp.deactivate()\n\t\tthis.disconnect$.next(true)\n\t\tthis.disconnect$.unsubscribe()\n\t\tthis.unsubscribeAll()\n\t}\n\n\tsubscribe<T extends EnumTopic>(destination: T, handler: TopicHandler<T>) {\n\t\tif (this.topicHandlers[destination]) {\n\t\t\tthis.topicHandlers[destination]!.push(handler)\n\t\t} else {\n\t\t\tthis.topicHandlers[destination] = [handler]\n\t\t\tthis.topicSubscrition[destination] = this.rxStomp\n\t\t\t\t.watch({\n\t\t\t\t\tdestination,\n\t\t\t\t})\n\t\t\t\t.subscribe(val => {\n\t\t\t\t\tthis.topicHandlers[destination]!.forEach(res => res(JSON.parse(val.body)))\n\t\t\t\t})\n\t\t}\n\t}\n\n\tunsubscribe<T extends EnumTopic>(destination: T, handler: TopicHandler<T>) {\n\t\tconst index = this.topicHandlers[destination]?.findIndex(v => v === handler)\n\t\tif (index !== undefined && index > -1) {\n\t\t\tthis.topicHandlers[destination]?.splice(index, 1)\n\t\t\tif (this.topicHandlers[destination]!.length === 0) {\n\t\t\t\tthis.topicSubscrition[destination]?.unsubscribe()\n\t\t\t\tthis.topicSubscrition[destination] = undefined\n\t\t\t}\n\t\t}\n\t}\n\n\tunsubscribeAll() {\n\t\tfor (const destination in this.topicSubscrition) {\n\t\t\tthis.topicSubscrition[destination as EnumTopic]!.unsubscribe()\n\t\t\tthis.topicSubscrition[destination as EnumTopic] = undefined\n\t\t}\n\t}\n\n\tpublish(destination: EnumPublishDestination, body: string) {\n\t\tconst receiptId = v4()\n\t\tthis.rxStomp.publish({\n\t\t\t//@ts-ignore\n\t\t\theaders: {\n\t\t\t\treceipt: receiptId,\n\t\t\t},\n\t\t\tdestination,\n\t\t\tbody,\n\t\t})\n\t\treturn from(this.rxStomp.asyncReceipt(receiptId)).pipe(\n\t\t\ttimeout({\n\t\t\t\tfirst: this.config.timeout,\n\t\t\t})\n\t\t)\n\t}\n\n\tprivate stateSubscribe() {\n\t\tconst stompErrorsSub = this.rxStomp.stompErrors$.subscribe(val => {\n\t\t\tthis.connectionState$.next({\n\t\t\t\ttype: InformWebsocketType['3'],\n\t\t\t\tmessage: InformWebsocketText['3'] + val.body,\n\t\t\t})\n\t\t})\n\t\tconst webSocketErrorsSub = this.rxStomp.webSocketErrors$.subscribe(val => {\n\t\t\tthis.connectionState$.next({\n\t\t\t\ttype: InformWebsocketType['3'],\n\t\t\t\tmessage: InformWebsocketText['3'] + val.type,\n\t\t\t})\n\t\t})\n\t\tconst connectionStateSub = this.rxStomp.connectionState$.subscribe(val => {\n\t\t\tthis.connectionState$.next({\n\t\t\t\ttype: InformWebsocketType[val],\n\t\t\t\tmessage: InformWebsocketText[val],\n\t\t\t})\n\t\t\tif (val !== 1) {\n\t\t\t\tthis.rxStomp.activate()\n\t\t\t}\n\t\t})\n\t\tthis.disconnect$.subscribe(val => {\n\t\t\tstompErrorsSub.unsubscribe()\n\t\t\twebSocketErrorsSub.unsubscribe()\n\t\t\tconnectionStateSub.unsubscribe()\n\t\t})\n\t}\n\n\tprivate configure(token: string) {\n\t\tthis.rxStomp.configure({\n\t\t\tbrokerURL: this.config.baseUrl + this.config.url,\n\t\t\tconnectHeaders: {\n\t\t\t\tAuthorization: token,\n\t\t\t},\n\t\t\treconnectDelay: this.config.reconnectDelay,\n\t\t\theartbeatIncoming: 0, // server to client\n\t\t\theartbeatOutgoing: this.config.timeout,\n\t\t})\n\t}\n\n\tprivate heartbeatSubscribe() {\n\t\tconst heartbeatSubscrition = interval(this.config.heartbeatTime).subscribe(() =>\n\t\t\tthis.publish(EnumPublishDestination.HEARTBEAT, Date.now().toString()).subscribe({\n\t\t\t\tcomplete: () => {},\n\t\t\t\terror: e => {\n\t\t\t\t\tthis.rxStomp.deactivate({ force: true })\n\t\t\t\t},\n\t\t\t})\n\t\t)\n\t\tthis.disconnect$.subscribe(val => {\n\t\t\theartbeatSubscrition.unsubscribe()\n\t\t})\n\t}\n}\n","import { EnumTopic } from './enum'\nimport { TopicResponse } from './type'\nimport { WebSocketService } from './ws'\nimport { onUnmounted } from 'vue'\nimport { createDecorator, getProtoMetadata, Hanlder, injectService } from 'vue3-oop'\n\nexport const WsSubscribe: WsSubscribeDecorator = createDecorator('WsSubscribe')\n\nexport interface WsSubscribeDecorator {\n\t(enumTopic: EnumTopic): PropertyDecorator\n\tMetadataKey: symbol | string\n}\nfunction handler(targetThis: Record<any, any>) {\n\tconst list = getProtoMetadata<EnumTopic>(targetThis, WsSubscribe.MetadataKey)\n\tif (!list || !list.length) return\n\tconst websocketService = injectService(WebSocketService)!\n\tfor (const item of list) {\n\t\tconst { options, key } = item\n\n\t\tconst fn = (e: TopicResponse<EnumTopic>) => targetThis[key as string].call(targetThis, e)\n\t\twebsocketService.subscribe(options, fn)\n\n\t\tonUnmounted(() => {\n\t\t\twebsocketService.unsubscribe(options, fn)\n\t\t})\n\t}\n}\n\nexport const WsSubscribeHandler: Hanlder = {\n\tkey: 'WsSubscribe',\n\thandler,\n}\n","import { EnumTopic } from './enum'\n\nexport type TopicHandlers = {\n\t[x in EnumTopic]?: ((response: TopicResponses[x]) => any)[]\n}\n\nexport type TopicHandler<T extends EnumTopic> = (response: TopicResponse<T>) => any\n\nexport type TopicResponse<T extends EnumTopic> = TopicResponses[T]\n\nexport type TopicResponses = {\n\t[EnumTopic.BPMN]: BpmnMessage\n\t[EnumTopic.EVIDENCE]: any\n\t[x: string]: any\n}\n\nexport enum EnumBpmnTaskAction {\n\tTASK_CREATED = 'task-created',\n\tTASK_ASSIGNED = 'task-assigned',\n\tTASK_COMPLETED = 'task-complete',\n\tTASK_CANCELLD = 'task-cancelled',\n}\n\nexport enum EnumBpmnProcessAction {\n\tPROCESS_STARTED = 'process-started',\n\tPROCESS_UPDATED = 'process-updated',\n\tPROCESS_COMPLETED = 'process-completed',\n\tPROCESS_CANCELLED = 'process-cancelled',\n\tPROCESS_VARIABLE_UPDATED = 'process-variable-updated',\n}\nexport interface BpmnTaskMessage {\n\taction: EnumBpmnTaskAction\n\tdata: {\n\t\tassignee?: string\n\t\tbusinessKey: string\n\t\tcandidateUsers: string[]\n\t\tcandidateGroupUsers: string[]\n\t\tname: string\n\t\tprocessDefinitionId: string\n\t\tprocessDefinitionKey: string\n\t\tprocessInstanceId: string\n\t\tstartBy: string\n\t\ttaskId: string\n\t\ttaskKey: string\n\t\tuid: string\n\t}\n}\nexport interface BpmnProcessMessage {\n\taction: EnumBpmnProcessAction\n\tdata: {\n\t\tid: string\n\t\tbusinessKey: string\n\t\tprocessDefinitionId: string\n\t\tprocessDefinitionKey: string\n\t\tprocessInstanceId: string\n\t\tuid: string\n\t\tvariables?: Record<string, any>\n\t}\n}\n\nexport type BpmnMessage = BpmnTaskMessage | BpmnProcessMessage\n\nexport type WebsocketConnectionState = {\n\ttype: string\n\tmessage: string\n\tcode?: string\n}\n"],"names":["BYTE","FrameImpl","params","command","headers","body","binaryBody","escapeHeaderValues","skipContentLengthHeader","rawFrame","trim","str","header","key","value","cmdAndHeaders","lines","name","s","uint8CmdAndHeaders","nullTerminator","uint8Frame","NULL","LF","CR","COLON","Parser","onFrame","onIncomingPing","segment","appendMissingNULLonIncoming","chunk","chunkWithNull","byte","contentLengthHeader","rawResult","StompSocketState","ActivationState","Versions","versions","x","augmentWebsocket","webSocket","debug","noOp","ts","id","origOnClose","closeEvent","delay","StompHandler","_client","_webSocket","config","frame","subscription","onReceive","message","client","messageId","callback","parser","evt","rawChunkAsString","errorEvent","connectHeaders","serverOutgoing","serverIncoming","v","ttl","delta","msg","rawChunk","out","disconnectHeaders","error","destination","hdrs","receiptId","transactionId","txId","subscriptionId","Client","conf","_a","state","_activate","__async","options","force","needToDispose","retPromise","origOnWebSocketClose","resolve","reject","RxStompState","RxStomp","stompClient","BehaviorSubject","filter","currentState","Subject","rxStompConfig","stompConfig","parameters","shouldRetry","queuedMessages","queuedMessage","opts","defaults","Observable","messages","stompSubscription","stompConnectedSubscription","connectedPre$","take","stompErrorsSubscription","subHeaders","unsubHeaders","share","firstValueFrom","getRandomValues","rnds8","rng","byteToHex","i","unsafeStringify","arr","offset","randomUUID","native","v4","buf","rnds","EnumTopic","EnumPublishDestination","InformWebsocketText","InformWebsocketType","WebscoketConfig","__publicField","WebSocketService","token","handler","val","res","index","_b","_c","from","timeout","stompErrorsSub","webSocketErrorsSub","connectionStateSub","heartbeatSubscrition","interval","e","WsSubscribe","createDecorator","targetThis","list","getProtoMetadata","websocketService","injectService","item","fn","onUnmounted","WsSubscribeHandler","EnumBpmnTaskAction","EnumBpmnProcessAction"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13]}