{"version":3,"file":"szjw-ws.mjs","sources":["../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/byte.js","../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/frame-impl.js","../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/parser.js","../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/types.js","../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/versions.js","../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/augment-websocket.js","../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/stomp-handler.js","../node_modules/.pnpm/@stomp+stompjs@7.0.0/node_modules/@stomp/stompjs/esm6/client.js","../node_modules/.pnpm/@stomp+rx-stomp@2.0.0_5oik75f6xlrwqgyz3kyxxdpe2e/node_modules/@stomp/rx-stomp/esm6/rx-stomp-state.js","../node_modules/.pnpm/@stomp+rx-stomp@2.0.0_5oik75f6xlrwqgyz3kyxxdpe2e/node_modules/@stomp/rx-stomp/esm6/rx-stomp.js","../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/rng.js","../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/native.js","../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v4.js","../src/core/enum.ts","../src/core/config.ts","../src/core/ws.ts","../src/core/decorator.ts"],"sourcesContent":["/**\n * Some byte values, used as per STOMP specifications.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport const BYTE = {\n    // LINEFEED byte (octet 10)\n    LF: '\\x0A',\n    // NULL byte (octet 0)\n    NULL: '\\x00',\n};\n//# sourceMappingURL=byte.js.map","import { BYTE } from './byte.js';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport class FrameImpl {\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    constructor(params) {\n        const { command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader, } = params;\n        this.command = command;\n        this.headers = Object.assign({}, headers || {});\n        if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n        }\n        else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n        }\n        this.escapeHeaderValues = escapeHeaderValues || false;\n        this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    /**\n     * body of the frame\n     */\n    get body() {\n        if (!this._body && this.isBinaryBody) {\n            this._body = new TextDecoder().decode(this._binaryBody);\n        }\n        return this._body || '';\n    }\n    /**\n     * body as Uint8Array\n     */\n    get binaryBody() {\n        if (!this._binaryBody && !this.isBinaryBody) {\n            this._binaryBody = new TextEncoder().encode(this._body);\n        }\n        // At this stage it will definitely have a valid value\n        return this._binaryBody;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    static fromRawFrame(rawFrame, escapeHeaderValues) {\n        const headers = {};\n        const trim = (str) => str.replace(/^\\s+|\\s+$/g, '');\n        // In case of repeated headers, as per standards, first value need to be used\n        for (const header of rawFrame.headers.reverse()) {\n            const idx = header.indexOf(':');\n            const key = trim(header[0]);\n            let value = trim(header[1]);\n            if (escapeHeaderValues &&\n                rawFrame.command !== 'CONNECT' &&\n                rawFrame.command !== 'CONNECTED') {\n                value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n        }\n        return new FrameImpl({\n            command: rawFrame.command,\n            headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues,\n        });\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    serialize() {\n        const cmdAndHeaders = this.serializeCmdAndHeaders();\n        if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n        }\n        else {\n            return cmdAndHeaders + this._body + BYTE.NULL;\n        }\n    }\n    serializeCmdAndHeaders() {\n        const lines = [this.command];\n        if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n        }\n        for (const name of Object.keys(this.headers || {})) {\n            const value = this.headers[name];\n            if (this.escapeHeaderValues &&\n                this.command !== 'CONNECT' &&\n                this.command !== 'CONNECTED') {\n                lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n            }\n            else {\n                lines.push(`${name}:${value}`);\n            }\n        }\n        if (this.isBinaryBody ||\n            (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n            lines.push(`content-length:${this.bodyLength()}`);\n        }\n        return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n    isBodyEmpty() {\n        return this.bodyLength() === 0;\n    }\n    bodyLength() {\n        const binaryBody = this.binaryBody;\n        return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    static sizeOfUTF8(s) {\n        return s ? new TextEncoder().encode(s).length : 0;\n    }\n    static toUnit8Array(cmdAndHeaders, binaryBody) {\n        const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n        const nullTerminator = new Uint8Array([0]);\n        const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n        uint8Frame.set(uint8CmdAndHeaders);\n        uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n        uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n        return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    static marshall(params) {\n        const frame = new FrameImpl(params);\n        return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n    static hdrValueEscape(str) {\n        return str\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n    static hdrValueUnEscape(str) {\n        return str\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\n/g, '\\n')\n            .replace(/\\\\c/g, ':')\n            .replace(/\\\\\\\\/g, '\\\\');\n    }\n}\n//# sourceMappingURL=frame-impl.js.map","/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\nconst LF = 10;\n/**\n * @internal\n */\nconst CR = 13;\n/**\n * @internal\n */\nconst COLON = 58;\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class Parser {\n    constructor(onFrame, onIncomingPing) {\n        this.onFrame = onFrame;\n        this.onIncomingPing = onIncomingPing;\n        this._encoder = new TextEncoder();\n        this._decoder = new TextDecoder();\n        this._token = [];\n        this._initState();\n    }\n    parseChunk(segment, appendMissingNULLonIncoming = false) {\n        let chunk;\n        if (typeof segment === 'string') {\n            chunk = this._encoder.encode(segment);\n        }\n        else {\n            chunk = new Uint8Array(segment);\n        }\n        // See https://github.com/stomp-js/stompjs/issues/89\n        // Remove when underlying issue is fixed.\n        //\n        // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n        if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n            const chunkWithNull = new Uint8Array(chunk.length + 1);\n            chunkWithNull.set(chunk, 0);\n            chunkWithNull[chunk.length] = 0;\n            chunk = chunkWithNull;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < chunk.length; i++) {\n            const byte = chunk[i];\n            this._onByte(byte);\n        }\n    }\n    // The following implements a simple Rec Descent Parser.\n    // The grammar is simple and just one byte tells what should be the next state\n    _collectFrame(byte) {\n        if (byte === NULL) {\n            // Ignore\n            return;\n        }\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            // Incoming Ping\n            this.onIncomingPing();\n            return;\n        }\n        this._onByte = this._collectCommand;\n        this._reinjectByte(byte);\n    }\n    _collectCommand(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.command = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaders(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._setupCollectBody();\n            return;\n        }\n        this._onByte = this._collectHeaderKey;\n        this._reinjectByte(byte);\n    }\n    _reinjectByte(byte) {\n        this._onByte(byte);\n    }\n    _collectHeaderKey(byte) {\n        if (byte === COLON) {\n            this._headerKey = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaderValue;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaderValue(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.headers.push([\n                this._headerKey,\n                this._consumeTokenAsUTF8(),\n            ]);\n            this._headerKey = undefined;\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _setupCollectBody() {\n        const contentLengthHeader = this._results.headers.filter((header) => {\n            return header[0] === 'content-length';\n        })[0];\n        if (contentLengthHeader) {\n            this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n            this._onByte = this._collectBodyFixedSize;\n        }\n        else {\n            this._onByte = this._collectBodyNullTerminated;\n        }\n    }\n    _collectBodyNullTerminated(byte) {\n        if (byte === NULL) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectBodyFixedSize(byte) {\n        // It is post decrement, so that we discard the trailing NULL octet\n        if (this._bodyBytesRemaining-- === 0) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _retrievedBody() {\n        this._results.binaryBody = this._consumeTokenAsRaw();\n        try {\n            this.onFrame(this._results);\n        }\n        catch (e) {\n            console.log(`Ignoring an exception thrown by a frame handler. Original exception: `, e);\n        }\n        this._initState();\n    }\n    // Rec Descent Parser helpers\n    _consumeByte(byte) {\n        this._token.push(byte);\n    }\n    _consumeTokenAsUTF8() {\n        return this._decoder.decode(this._consumeTokenAsRaw());\n    }\n    _consumeTokenAsRaw() {\n        const rawResult = new Uint8Array(this._token);\n        this._token = [];\n        return rawResult;\n    }\n    _initState() {\n        this._results = {\n            command: undefined,\n            headers: [],\n            binaryBody: undefined,\n        };\n        this._token = [];\n        this._headerKey = undefined;\n        this._onByte = this._collectFrame;\n    }\n}\n//# sourceMappingURL=parser.js.map","/**\n * Possible states for the IStompSocket\n */\nexport var StompSocketState;\n(function (StompSocketState) {\n    StompSocketState[StompSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    StompSocketState[StompSocketState[\"OPEN\"] = 1] = \"OPEN\";\n    StompSocketState[StompSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n    StompSocketState[StompSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(StompSocketState = StompSocketState || (StompSocketState = {}));\n/**\n * Possible activation state\n */\nexport var ActivationState;\n(function (ActivationState) {\n    ActivationState[ActivationState[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    ActivationState[ActivationState[\"DEACTIVATING\"] = 1] = \"DEACTIVATING\";\n    ActivationState[ActivationState[\"INACTIVE\"] = 2] = \"INACTIVE\";\n})(ActivationState = ActivationState || (ActivationState = {}));\n//# sourceMappingURL=types.js.map","/**\n * Supported STOMP versions\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Versions {\n    /**\n     * Takes an array of versions, typical elements '1.2', '1.1', or '1.0'\n     *\n     * You will be creating an instance of this class if you want to override\n     * supported versions to be declared during STOMP handshake.\n     */\n    constructor(versions) {\n        this.versions = versions;\n    }\n    /**\n     * Used as part of CONNECT STOMP Frame\n     */\n    supportedVersions() {\n        return this.versions.join(',');\n    }\n    /**\n     * Used while creating a WebSocket\n     */\n    protocolVersions() {\n        return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n    }\n}\n/**\n * Indicates protocol version 1.0\n */\nVersions.V1_0 = '1.0';\n/**\n * Indicates protocol version 1.1\n */\nVersions.V1_1 = '1.1';\n/**\n * Indicates protocol version 1.2\n */\nVersions.V1_2 = '1.2';\n/**\n * @internal\n */\nVersions.default = new Versions([\n    Versions.V1_2,\n    Versions.V1_1,\n    Versions.V1_0,\n]);\n//# sourceMappingURL=versions.js.map","/**\n * @internal\n */\nexport function augmentWebsocket(webSocket, debug) {\n    webSocket.terminate = function () {\n        const noOp = () => { };\n        // set all callbacks to no op\n        this.onerror = noOp;\n        this.onmessage = noOp;\n        this.onopen = noOp;\n        const ts = new Date();\n        const id = Math.random().toString().substring(2, 8); // A simulated id\n        const origOnClose = this.onclose;\n        // Track delay in actual closure of the socket\n        this.onclose = closeEvent => {\n            const delay = new Date().getTime() - ts.getTime();\n            debug(`Discarded socket (#${id})  closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`);\n        };\n        this.close();\n        origOnClose?.call(webSocket, {\n            code: 4001,\n            reason: `Quick discarding socket (#${id}) without waiting for the shutdown sequence.`,\n            wasClean: false,\n        });\n    };\n}\n//# sourceMappingURL=augment-websocket.js.map","import { BYTE } from './byte.js';\nimport { FrameImpl } from './frame-impl.js';\nimport { Parser } from './parser.js';\nimport { StompSocketState, } from './types.js';\nimport { Versions } from './versions.js';\nimport { augmentWebsocket } from './augment-websocket.js';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n    constructor(_client, _webSocket, config) {\n        this._client = _client;\n        this._webSocket = _webSocket;\n        this._connected = false;\n        this._serverFrameHandlers = {\n            // [CONNECTED Frame](https://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            CONNECTED: frame => {\n                this.debug(`connected to server ${frame.headers.server}`);\n                this._connected = true;\n                this._connectedVersion = frame.headers.version;\n                // STOMP version 1.2 needs header values to be escaped\n                if (this._connectedVersion === Versions.V1_2) {\n                    this._escapeHeaderValues = true;\n                }\n                this._setupHeartbeat(frame.headers);\n                this.onConnect(frame);\n            },\n            // [MESSAGE Frame](https://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            MESSAGE: frame => {\n                // the callback is registered when the client calls\n                // `subscribe()`.\n                // If there is no registered subscription for the received message,\n                // the default `onUnhandledMessage` callback is used that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](https://www.rabbitmq.com/stomp.html)).\n                const subscription = frame.headers.subscription;\n                const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n                // bless the frame to be a Message\n                const message = frame;\n                const client = this;\n                const messageId = this._connectedVersion === Versions.V1_2\n                    ? message.headers.ack\n                    : message.headers['message-id'];\n                // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n                message.ack = (headers = {}) => {\n                    return client.ack(messageId, subscription, headers);\n                };\n                message.nack = (headers = {}) => {\n                    return client.nack(messageId, subscription, headers);\n                };\n                onReceive(message);\n            },\n            // [RECEIPT Frame](https://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            RECEIPT: frame => {\n                const callback = this._receiptWatchers[frame.headers['receipt-id']];\n                if (callback) {\n                    callback(frame);\n                    // Server will acknowledge only once, remove the callback\n                    delete this._receiptWatchers[frame.headers['receipt-id']];\n                }\n                else {\n                    this.onUnhandledReceipt(frame);\n                }\n            },\n            // [ERROR Frame](https://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            ERROR: frame => {\n                this.onStompError(frame);\n            },\n        };\n        // used to index subscribers\n        this._counter = 0;\n        // subscription callbacks indexed by subscriber's ID\n        this._subscriptions = {};\n        // receipt-watchers indexed by receipts-ids\n        this._receiptWatchers = {};\n        this._partialData = '';\n        this._escapeHeaderValues = false;\n        this._lastServerActivityTS = Date.now();\n        this.debug = config.debug;\n        this.stompVersions = config.stompVersions;\n        this.connectHeaders = config.connectHeaders;\n        this.disconnectHeaders = config.disconnectHeaders;\n        this.heartbeatIncoming = config.heartbeatIncoming;\n        this.heartbeatOutgoing = config.heartbeatOutgoing;\n        this.splitLargeFrames = config.splitLargeFrames;\n        this.maxWebSocketChunkSize = config.maxWebSocketChunkSize;\n        this.forceBinaryWSFrames = config.forceBinaryWSFrames;\n        this.logRawCommunication = config.logRawCommunication;\n        this.appendMissingNULLonIncoming = config.appendMissingNULLonIncoming;\n        this.discardWebsocketOnCommFailure = config.discardWebsocketOnCommFailure;\n        this.onConnect = config.onConnect;\n        this.onDisconnect = config.onDisconnect;\n        this.onStompError = config.onStompError;\n        this.onWebSocketClose = config.onWebSocketClose;\n        this.onWebSocketError = config.onWebSocketError;\n        this.onUnhandledMessage = config.onUnhandledMessage;\n        this.onUnhandledReceipt = config.onUnhandledReceipt;\n        this.onUnhandledFrame = config.onUnhandledFrame;\n    }\n    get connectedVersion() {\n        return this._connectedVersion;\n    }\n    get connected() {\n        return this._connected;\n    }\n    start() {\n        const parser = new Parser(\n        // On Frame\n        rawFrame => {\n            const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n            // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n            if (!this.logRawCommunication) {\n                this.debug(`<<< ${frame}`);\n            }\n            const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n            serverFrameHandler(frame);\n        }, \n        // On Incoming Ping\n        () => {\n            this.debug('<<< PONG');\n        });\n        this._webSocket.onmessage = (evt) => {\n            this.debug('Received data');\n            this._lastServerActivityTS = Date.now();\n            if (this.logRawCommunication) {\n                const rawChunkAsString = evt.data instanceof ArrayBuffer\n                    ? new TextDecoder().decode(evt.data)\n                    : evt.data;\n                this.debug(`<<< ${rawChunkAsString}`);\n            }\n            parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n        };\n        this._webSocket.onclose = (closeEvent) => {\n            this.debug(`Connection closed to ${this._webSocket.url}`);\n            this._cleanUp();\n            this.onWebSocketClose(closeEvent);\n        };\n        this._webSocket.onerror = (errorEvent) => {\n            this.onWebSocketError(errorEvent);\n        };\n        this._webSocket.onopen = () => {\n            // Clone before updating\n            const connectHeaders = Object.assign({}, this.connectHeaders);\n            this.debug('Web Socket Opened...');\n            connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n            connectHeaders['heart-beat'] = [\n                this.heartbeatOutgoing,\n                this.heartbeatIncoming,\n            ].join(',');\n            this._transmit({ command: 'CONNECT', headers: connectHeaders });\n        };\n    }\n    _setupHeartbeat(headers) {\n        if (headers.version !== Versions.V1_1 &&\n            headers.version !== Versions.V1_2) {\n            return;\n        }\n        // It is valid for the server to not send this header\n        // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n        if (!headers['heart-beat']) {\n            return;\n        }\n        // heart-beat header received from the server looks like:\n        //\n        //     heart-beat: sx, sy\n        const [serverOutgoing, serverIncoming] = headers['heart-beat']\n            .split(',')\n            .map((v) => parseInt(v, 10));\n        if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n            const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n            this.debug(`send PING every ${ttl}ms`);\n            this._pinger = setInterval(() => {\n                if (this._webSocket.readyState === StompSocketState.OPEN) {\n                    this._webSocket.send(BYTE.LF);\n                    this.debug('>>> PING');\n                }\n            }, ttl);\n        }\n        if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n            const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n            this.debug(`check PONG every ${ttl}ms`);\n            this._ponger = setInterval(() => {\n                const delta = Date.now() - this._lastServerActivityTS;\n                // We wait twice the TTL to be flexible on window's setInterval calls\n                if (delta > ttl * 2) {\n                    this.debug(`did not receive server activity for the last ${delta}ms`);\n                    this._closeOrDiscardWebsocket();\n                }\n            }, ttl);\n        }\n    }\n    _closeOrDiscardWebsocket() {\n        if (this.discardWebsocketOnCommFailure) {\n            this.debug('Discarding websocket, the underlying socket may linger for a while');\n            this.discardWebsocket();\n        }\n        else {\n            this.debug('Issuing close on the websocket');\n            this._closeWebsocket();\n        }\n    }\n    forceDisconnect() {\n        if (this._webSocket) {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeOrDiscardWebsocket();\n            }\n        }\n    }\n    _closeWebsocket() {\n        this._webSocket.onmessage = () => { }; // ignore messages\n        this._webSocket.close();\n    }\n    discardWebsocket() {\n        if (typeof this._webSocket.terminate !== 'function') {\n            augmentWebsocket(this._webSocket, (msg) => this.debug(msg));\n        }\n        // @ts-ignore - this method will be there at this stage\n        this._webSocket.terminate();\n    }\n    _transmit(params) {\n        const { command, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const frame = new FrameImpl({\n            command,\n            headers,\n            body,\n            binaryBody,\n            escapeHeaderValues: this._escapeHeaderValues,\n            skipContentLengthHeader,\n        });\n        let rawChunk = frame.serialize();\n        if (this.logRawCommunication) {\n            this.debug(`>>> ${rawChunk}`);\n        }\n        else {\n            this.debug(`>>> ${frame}`);\n        }\n        if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n            rawChunk = new TextEncoder().encode(rawChunk);\n        }\n        if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n            this._webSocket.send(rawChunk);\n        }\n        else {\n            let out = rawChunk;\n            while (out.length > 0) {\n                const chunk = out.substring(0, this.maxWebSocketChunkSize);\n                out = out.substring(this.maxWebSocketChunkSize);\n                this._webSocket.send(chunk);\n                this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n            }\n        }\n    }\n    dispose() {\n        if (this.connected) {\n            try {\n                // clone before updating\n                const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n                if (!disconnectHeaders.receipt) {\n                    disconnectHeaders.receipt = `close-${this._counter++}`;\n                }\n                this.watchForReceipt(disconnectHeaders.receipt, frame => {\n                    this._closeWebsocket();\n                    this._cleanUp();\n                    this.onDisconnect(frame);\n                });\n                this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n            }\n            catch (error) {\n                this.debug(`Ignoring error during disconnect ${error}`);\n            }\n        }\n        else {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeWebsocket();\n            }\n        }\n    }\n    _cleanUp() {\n        this._connected = false;\n        if (this._pinger) {\n            clearInterval(this._pinger);\n            this._pinger = undefined;\n        }\n        if (this._ponger) {\n            clearInterval(this._ponger);\n            this._ponger = undefined;\n        }\n    }\n    publish(params) {\n        const { destination, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const hdrs = Object.assign({ destination }, headers);\n        this._transmit({\n            command: 'SEND',\n            headers: hdrs,\n            body,\n            binaryBody,\n            skipContentLengthHeader,\n        });\n    }\n    watchForReceipt(receiptId, callback) {\n        this._receiptWatchers[receiptId] = callback;\n    }\n    subscribe(destination, callback, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (!headers.id) {\n            headers.id = `sub-${this._counter++}`;\n        }\n        headers.destination = destination;\n        this._subscriptions[headers.id] = callback;\n        this._transmit({ command: 'SUBSCRIBE', headers });\n        const client = this;\n        return {\n            id: headers.id,\n            unsubscribe(hdrs) {\n                return client.unsubscribe(headers.id, hdrs);\n            },\n        };\n    }\n    unsubscribe(id, headers = {}) {\n        headers = Object.assign({}, headers);\n        delete this._subscriptions[id];\n        headers.id = id;\n        this._transmit({ command: 'UNSUBSCRIBE', headers });\n    }\n    begin(transactionId) {\n        const txId = transactionId || `tx-${this._counter++}`;\n        this._transmit({\n            command: 'BEGIN',\n            headers: {\n                transaction: txId,\n            },\n        });\n        const client = this;\n        return {\n            id: txId,\n            commit() {\n                client.commit(txId);\n            },\n            abort() {\n                client.abort(txId);\n            },\n        };\n    }\n    commit(transactionId) {\n        this._transmit({\n            command: 'COMMIT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    abort(transactionId) {\n        this._transmit({\n            command: 'ABORT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    ack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        this._transmit({ command: 'ACK', headers });\n    }\n    nack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        return this._transmit({ command: 'NACK', headers });\n    }\n}\n//# sourceMappingURL=stomp-handler.js.map","import { StompHandler } from './stomp-handler.js';\nimport { ActivationState, StompSocketState, } from './types.js';\nimport { Versions } from './versions.js';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n    /**\n     * Create an instance.\n     */\n    constructor(conf = {}) {\n        /**\n         * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\n         *\n         * Example:\n         * ```javascript\n         *        // Try only versions 1.1 and 1.0\n         *        client.stompVersions = new Versions(['1.1', '1.0'])\n         * ```\n         */\n        this.stompVersions = Versions.default;\n        /**\n         * Will retry if Stomp connection is not established in specified milliseconds.\n         * Default 0, which switches off automatic reconnection.\n         */\n        this.connectionTimeout = 0;\n        /**\n         *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n         */\n        this.reconnectDelay = 5000;\n        /**\n         * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatIncoming = 10000;\n        /**\n         * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatOutgoing = 10000;\n        /**\n         * This switches on a non-standard behavior while sending WebSocket packets.\n         * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n         * Only Java Spring brokers seem to support this mode.\n         *\n         * WebSockets, by itself, split large (text) packets,\n         * so it is not needed with a truly compliant STOMP/WebSocket broker.\n         * Setting it for such a broker will cause large messages to fail.\n         *\n         * `false` by default.\n         *\n         * Binary frames are never split.\n         */\n        this.splitLargeFrames = false;\n        /**\n         * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n         * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n         */\n        this.maxWebSocketChunkSize = 8 * 1024;\n        /**\n         * Usually the\n         * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n         * is automatically decided by type of the payload.\n         * Default is `false`, which should work with all compliant brokers.\n         *\n         * Set this flag to force binary frames.\n         */\n        this.forceBinaryWSFrames = false;\n        /**\n         * A bug in ReactNative chops a string on occurrence of a NULL.\n         * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n         * This makes incoming WebSocket messages invalid STOMP packets.\n         * Setting this flag attempts to reverse the damage by appending a NULL.\n         * If the broker splits a large message into multiple WebSocket messages,\n         * this flag will cause data loss and abnormal termination of connection.\n         *\n         * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n         */\n        this.appendMissingNULLonIncoming = false;\n        /**\n         * Browsers do not immediately close WebSockets when `.close` is issued.\n         * This may cause reconnection to take a significantly long time in case\n         *  of some types of failures.\n         * In case of incoming heartbeat failure, this experimental flag instructs\n         * the library to discard the socket immediately\n         * (even before it is actually closed).\n         */\n        this.discardWebsocketOnCommFailure = false;\n        /**\n         * Activation state.\n         *\n         * It will usually be ACTIVE or INACTIVE.\n         * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n         */\n        this.state = ActivationState.INACTIVE;\n        // No op callbacks\n        const noOp = () => { };\n        this.debug = noOp;\n        this.beforeConnect = noOp;\n        this.onConnect = noOp;\n        this.onDisconnect = noOp;\n        this.onUnhandledMessage = noOp;\n        this.onUnhandledReceipt = noOp;\n        this.onUnhandledFrame = noOp;\n        this.onStompError = noOp;\n        this.onWebSocketClose = noOp;\n        this.onWebSocketError = noOp;\n        this.logRawCommunication = false;\n        this.onChangeState = noOp;\n        // These parameters would typically get proper values before connect is called\n        this.connectHeaders = {};\n        this._disconnectHeaders = {};\n        // Apply configuration\n        this.configure(conf);\n    }\n    /**\n     * Underlying WebSocket instance, READONLY.\n     */\n    get webSocket() {\n        return this._stompHandler?._webSocket;\n    }\n    /**\n     * Disconnection headers.\n     */\n    get disconnectHeaders() {\n        return this._disconnectHeaders;\n    }\n    set disconnectHeaders(value) {\n        this._disconnectHeaders = value;\n        if (this._stompHandler) {\n            this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n        }\n    }\n    /**\n     * `true` if there is an active connection to STOMP Broker\n     */\n    get connected() {\n        return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * version of STOMP protocol negotiated with the server, READONLY\n     */\n    get connectedVersion() {\n        return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * if the client is active (connected or going to reconnect)\n     */\n    get active() {\n        return this.state === ActivationState.ACTIVE;\n    }\n    _changeState(state) {\n        this.state = state;\n        this.onChangeState(state);\n    }\n    /**\n     * Update configuration.\n     */\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect.\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n    activate() {\n        const _activate = () => {\n            if (this.active) {\n                this.debug('Already ACTIVE, ignoring request to activate');\n                return;\n            }\n            this._changeState(ActivationState.ACTIVE);\n            this._connect();\n        };\n        // if it is deactivating, wait for it to complete before activating.\n        if (this.state === ActivationState.DEACTIVATING) {\n            this.debug('Waiting for deactivation to finish before activating');\n            this.deactivate().then(() => {\n                _activate();\n            });\n        }\n        else {\n            _activate();\n        }\n    }\n    async _connect() {\n        await this.beforeConnect();\n        if (this._stompHandler) {\n            this.debug('There is already a stompHandler, skipping the call to connect');\n            return;\n        }\n        if (!this.active) {\n            this.debug('Client has been marked inactive, will not attempt to connect');\n            return;\n        }\n        // setup connection watcher\n        if (this.connectionTimeout > 0) {\n            // clear first\n            if (this._connectionWatcher) {\n                clearTimeout(this._connectionWatcher);\n            }\n            this._connectionWatcher = setTimeout(() => {\n                if (this.connected) {\n                    return;\n                }\n                // Connection not established, close the underlying socket\n                // a reconnection will be attempted\n                this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n                this.forceDisconnect();\n            }, this.connectionTimeout);\n        }\n        this.debug('Opening Web Socket...');\n        // Get the actual WebSocket (or a similar object)\n        const webSocket = this._createWebSocket();\n        this._stompHandler = new StompHandler(this, webSocket, {\n            debug: this.debug,\n            stompVersions: this.stompVersions,\n            connectHeaders: this.connectHeaders,\n            disconnectHeaders: this._disconnectHeaders,\n            heartbeatIncoming: this.heartbeatIncoming,\n            heartbeatOutgoing: this.heartbeatOutgoing,\n            splitLargeFrames: this.splitLargeFrames,\n            maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n            forceBinaryWSFrames: this.forceBinaryWSFrames,\n            logRawCommunication: this.logRawCommunication,\n            appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n            discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n            onConnect: frame => {\n                // Successfully connected, stop the connection watcher\n                if (this._connectionWatcher) {\n                    clearTimeout(this._connectionWatcher);\n                    this._connectionWatcher = undefined;\n                }\n                if (!this.active) {\n                    this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                    this._disposeStompHandler();\n                    return;\n                }\n                this.onConnect(frame);\n            },\n            onDisconnect: frame => {\n                this.onDisconnect(frame);\n            },\n            onStompError: frame => {\n                this.onStompError(frame);\n            },\n            onWebSocketClose: evt => {\n                this._stompHandler = undefined; // a new one will be created in case of a reconnect\n                if (this.state === ActivationState.DEACTIVATING) {\n                    // Mark deactivation complete\n                    this._changeState(ActivationState.INACTIVE);\n                }\n                // The callback is called before attempting to reconnect, this would allow the client\n                // to be `deactivated` in the callback.\n                this.onWebSocketClose(evt);\n                if (this.active) {\n                    this._schedule_reconnect();\n                }\n            },\n            onWebSocketError: evt => {\n                this.onWebSocketError(evt);\n            },\n            onUnhandledMessage: message => {\n                this.onUnhandledMessage(message);\n            },\n            onUnhandledReceipt: frame => {\n                this.onUnhandledReceipt(frame);\n            },\n            onUnhandledFrame: frame => {\n                this.onUnhandledFrame(frame);\n            },\n        });\n        this._stompHandler.start();\n    }\n    _createWebSocket() {\n        let webSocket;\n        if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n        }\n        else if (this.brokerURL) {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n        }\n        else {\n            throw new Error('Either brokerURL or webSocketFactory must be provided');\n        }\n        webSocket.binaryType = 'arraybuffer';\n        return webSocket;\n    }\n    _schedule_reconnect() {\n        if (this.reconnectDelay > 0) {\n            this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n            this._reconnector = setTimeout(() => {\n                this._connect();\n            }, this.reconnectDelay);\n        }\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\n     *\n     * This call is async. It will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after the underlying websocket is properly disposed of.\n     *\n     * It is not an error to invoke this method more than once.\n     * Each of those would resolve on completion of deactivation.\n     *\n     * To reactivate, you can call [Client#activate]{@link Client#activate}.\n     *\n     * Experimental: pass `force: true` to immediately discard the underlying connection.\n     * This mode will skip both the STOMP and the Websocket shutdown sequences.\n     * In some cases, browsers take a long time in the Websocket shutdown\n     * if the underlying connection had gone stale.\n     * Using this mode can speed up.\n     * When this mode is used, the actual Websocket may linger for a while\n     * and the broker may not realize that the connection is no longer in use.\n     *\n     * It is possible to invoke this method initially without the `force` option\n     * and subsequently, say after a wait, with the `force` option.\n     */\n    async deactivate(options = {}) {\n        const force = options.force || false;\n        const needToDispose = this.active;\n        let retPromise;\n        if (this.state === ActivationState.INACTIVE) {\n            this.debug(`Already INACTIVE, nothing more to do`);\n            return Promise.resolve();\n        }\n        this._changeState(ActivationState.DEACTIVATING);\n        // Clear if a reconnection was scheduled\n        if (this._reconnector) {\n            clearTimeout(this._reconnector);\n            this._reconnector = undefined;\n        }\n        if (this._stompHandler &&\n            // @ts-ignore - if there is a _stompHandler, there is the webSocket\n            this.webSocket.readyState !== StompSocketState.CLOSED) {\n            const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\n            // we need to wait for the underlying websocket to close\n            retPromise = new Promise((resolve, reject) => {\n                // @ts-ignore - there is a _stompHandler\n                this._stompHandler.onWebSocketClose = evt => {\n                    origOnWebSocketClose(evt);\n                    resolve();\n                };\n            });\n        }\n        else {\n            // indicate that auto reconnect loop should terminate\n            this._changeState(ActivationState.INACTIVE);\n            return Promise.resolve();\n        }\n        if (force) {\n            this._stompHandler?.discardWebsocket();\n        }\n        else if (needToDispose) {\n            this._disposeStompHandler();\n        }\n        return retPromise;\n    }\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n    forceDisconnect() {\n        if (this._stompHandler) {\n            this._stompHandler.forceDisconnect();\n        }\n    }\n    _disposeStompHandler() {\n        // Dispose STOMP Handler\n        if (this._stompHandler) {\n            this._stompHandler.dispose();\n        }\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body, use `binaryBody` parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages, `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect\n     * if the message body has NULL octet(s) and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    publish(params) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.publish(params);\n    }\n    _checkConnection() {\n        if (!this.connected) {\n            throw new TypeError('There is no underlying STOMP connection');\n        }\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use.\n     * Typically, a sequence, a UUID, a random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based on the value of the receipt-id.\n     *\n     * This method allows watching for a receipt and invoking the callback\n     *  when the corresponding receipt has been received.\n     *\n     * The actual {@link IFrame} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n    watchForReceipt(receiptId, callback) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each\n     * received message with the {@link IMessage} as argument.\n     *\n     * Note: The library will generate a unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the `headers` argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n    subscribe(destination, callback, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n    unsubscribe(id, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n    begin(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n    commit(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n    abort(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.abort(transactionId);\n    }\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    ack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    nack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n}\n//# sourceMappingURL=client.js.map","/**\n * Possible states for the RxStomp\n *\n * Part of `@stomp/rx-stomp`\n */\nexport var RxStompState;\n(function (RxStompState) {\n    RxStompState[RxStompState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    RxStompState[RxStompState[\"OPEN\"] = 1] = \"OPEN\";\n    RxStompState[RxStompState[\"CLOSING\"] = 2] = \"CLOSING\";\n    RxStompState[RxStompState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(RxStompState = RxStompState || (RxStompState = {}));\n//# sourceMappingURL=rx-stomp-state.js.map","import { BehaviorSubject, filter, firstValueFrom, Observable, share, Subject, take, } from 'rxjs';\nimport { Client, } from '@stomp/stompjs';\nimport { RxStompState } from './rx-stomp-state.js';\n/**\n * This is the main Stomp Client.\n * Typically, you will create an instance of this to connect to the STOMP broker.\n *\n * This wraps an instance of [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n * {@link Client}.\n *\n * The key difference is that it exposes operations as RxJS Observables.\n * For example, when a STOMP endpoint is subscribed it returns an Observable\n * that will stream all received messages.\n *\n * With exception to beforeConnect, functionality related to all callbacks in\n * [@stomp/stompjs Client]{@link Client}\n * is exposed as Observables/Subjects/BehaviorSubjects.\n *\n * RxStomp also tries to transparently handle connection failures.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStomp {\n    /**\n     * Instance of actual\n     * [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n     * {@link Client}.\n     *\n     * **Be careful in calling methods on it directly - you may get unintended consequences.**\n     */\n    get stompClient() {\n        return this._stompClient;\n    }\n    /**\n     * Constructor\n     *\n     * @param stompClient optionally inject the\n     * [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n     * {@link Client} to wrap. If this is not provided, a client will\n     * be constructed internally.\n     */\n    constructor(stompClient) {\n        /**\n         * Internal array to hold locally queued messages when STOMP broker is not connected.\n         */\n        this._queuedMessages = [];\n        const client = stompClient ? stompClient : new Client();\n        this._stompClient = client;\n        const noOp = () => { };\n        // Before connect is no op by default\n        this._beforeConnect = noOp;\n        // Correlate errors is falsey op by default\n        this._correlateErrors = () => undefined;\n        // debug is no-op by default\n        this._debug = noOp;\n        // Initial state is CLOSED\n        this._connectionStatePre$ = new BehaviorSubject(RxStompState.CLOSED);\n        this._connectedPre$ = this._connectionStatePre$.pipe(filter((currentState) => {\n            return currentState === RxStompState.OPEN;\n        }));\n        // Initial state is CLOSED\n        this.connectionState$ = new BehaviorSubject(RxStompState.CLOSED);\n        this.connected$ = this.connectionState$.pipe(filter((currentState) => {\n            return currentState === RxStompState.OPEN;\n        }));\n        // Setup sending queuedMessages\n        this.connected$.subscribe(() => {\n            this._sendQueuedMessages();\n        });\n        this._serverHeadersBehaviourSubject$ =\n            new BehaviorSubject(null);\n        this.serverHeaders$ = this._serverHeadersBehaviourSubject$.pipe(filter((headers) => {\n            return headers !== null;\n        }));\n        this.stompErrors$ = new Subject();\n        this.unhandledMessage$ = new Subject();\n        this.unhandledReceipts$ = new Subject();\n        this.unhandledFrame$ = new Subject();\n        this.webSocketErrors$ = new Subject();\n    }\n    /**\n     * Set configuration. This method may be called multiple times.\n     * Each call will add to the existing configuration.\n     *\n     * Example:\n     *\n     * ```javascript\n     *        const rxStomp = new RxStomp();\n     *        rxStomp.configure({\n     *          brokerURL: 'ws://127.0.0.1:15674/ws',\n     *          connectHeaders: {\n     *            login: 'guest',\n     *            passcode: 'guest'\n     *          },\n     *          heartbeatIncoming: 0,\n     *          heartbeatOutgoing: 20000,\n     *          reconnectDelay: 200,\n     *          debug: (msg: string): void => {\n     *            console.log(new Date(), msg);\n     *          }\n     *        });\n     *        rxStomp.activate();\n     * ```\n     *\n     * Maps to: [Client#configure]{@link Client#configure}\n     */\n    configure(rxStompConfig) {\n        const stompConfig = Object.assign({}, rxStompConfig);\n        if (stompConfig.beforeConnect) {\n            this._beforeConnect = stompConfig.beforeConnect;\n            delete stompConfig.beforeConnect;\n        }\n        if (stompConfig.correlateErrors) {\n            this._correlateErrors = stompConfig.correlateErrors;\n            delete stompConfig.correlateErrors;\n        }\n        // RxStompConfig has subset of StompConfig fields\n        this._stompClient.configure(stompConfig);\n        if (stompConfig.debug) {\n            this._debug = stompConfig.debug;\n        }\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [RxStompConfig#reconnectDelay]{@link RxStompConfig#reconnectDelay},\n     * it will keep trying to reconnect.\n     *\n     * Call [RxStomp#deactivate]{@link RxStomp#deactivate} to disconnect and stop reconnection attempts.\n     *\n     * Maps to: [Client#activate]{@link Client#activate}\n     */\n    activate() {\n        this._stompClient.configure({\n            beforeConnect: async () => {\n                this._changeState(RxStompState.CONNECTING);\n                // Call handler\n                await this._beforeConnect(this);\n            },\n            onConnect: (frame) => {\n                this._serverHeadersBehaviourSubject$.next(frame.headers);\n                // Indicate our connected state to observers\n                this._changeState(RxStompState.OPEN);\n            },\n            onStompError: (frame) => {\n                // Trigger the frame subject\n                this.stompErrors$.next(frame);\n            },\n            onWebSocketClose: () => {\n                this._changeState(RxStompState.CLOSED);\n            },\n            onUnhandledMessage: (message) => {\n                this.unhandledMessage$.next(message);\n            },\n            onUnhandledReceipt: (frame) => {\n                this.unhandledReceipts$.next(frame);\n            },\n            onUnhandledFrame: (frame) => {\n                this.unhandledFrame$.next(frame);\n            },\n            onWebSocketError: (evt) => {\n                this.webSocketErrors$.next(evt);\n            },\n        });\n        // Attempt connection\n        this._stompClient.activate();\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if the underlying STOMP connection was connected.\n     *\n     * To reactivate, you can call [RxStomp#activate]{@link RxStomp#activate}.\n     *\n     * This call is async. It will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after the underlying websocket is properly disposed of.\n     *\n     * Experimental: Since version 2.0.0, pass `force: true` to immediately discard the underlying connection.\n     * See [Client#deactivate]{@link Client#deactivate} for details.\n     *\n     * Maps to: [Client#deactivate]{@link Client#deactivate}\n     */\n    async deactivate(options = {}) {\n        this._changeState(RxStompState.CLOSING);\n        // The promise will be resolved immediately if there is no active connection\n        // otherwise, after it has successfully disconnected.\n        await this._stompClient.deactivate(options);\n        this._changeState(RxStompState.CLOSED);\n    }\n    /**\n     * It will return `true` if STOMP broker is connected and `false` otherwise.\n     */\n    connected() {\n        return this.connectionState$.getValue() === RxStompState.OPEN;\n    }\n    /**\n     * If the client is active (connected or going to reconnect).\n     *\n     *  Maps to: [Client#active]{@link Client#active}\n     */\n    get active() {\n        return this.stompClient.active;\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body, use binaryBody parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * The ` content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages, `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect if the message body has NULL octet(s)\n     * and `content-length` header is missing.\n     *\n     * The message will get locally queued if the STOMP broker is not connected. It will attempt to\n     * publish queued messages as soon as the broker gets connected.\n     * If you do not want that behavior,\n     * please set [retryIfDisconnected]{@link IRxStompPublishParams#retryIfDisconnected} to `false`\n     * in the parameters.\n     * When `false`, this function will raise an error if a message could not be sent immediately.\n     *\n     * Maps to: [Client#publish]{@link Client#publish}\n     *\n     * See: {@link IRxStompPublishParams} and {@link IPublishParams}\n     *\n     * ```javascript\n     *        rxStomp.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        rxStomp.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        rxStomp.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        rxStomp.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    publish(parameters) {\n        // retry behaviour is defaulted to true\n        const shouldRetry = parameters.retryIfDisconnected == null\n            ? true\n            : parameters.retryIfDisconnected;\n        if (this.connected()) {\n            this._stompClient.publish(parameters);\n        }\n        else if (shouldRetry) {\n            this._debug(`Not connected, queueing`);\n            this._queuedMessages.push(parameters);\n        }\n        else {\n            throw new Error('Cannot publish while broker is not connected');\n        }\n    }\n    /** It will send queued messages. */\n    _sendQueuedMessages() {\n        const queuedMessages = this._queuedMessages;\n        this._queuedMessages = [];\n        if (queuedMessages.length === 0) {\n            return;\n        }\n        this._debug(`Will try sending  ${queuedMessages.length} queued message(s)`);\n        for (const queuedMessage of queuedMessages) {\n            this._debug(`Attempting to send ${queuedMessage}`);\n            this.publish(queuedMessage);\n        }\n    }\n    watch(opts, headers = {}) {\n        const defaults = {\n            subHeaders: {},\n            unsubHeaders: {},\n            subscribeOnlyOnce: false,\n        };\n        let params;\n        if (typeof opts === 'string') {\n            params = Object.assign({}, defaults, {\n                destination: opts,\n                subHeaders: headers,\n            });\n        }\n        else {\n            params = Object.assign({}, defaults, opts);\n        }\n        /* Well, the logic is complicated but works beautifully. RxJS is indeed wonderful.\n         *\n         * We need to activate the underlying subscription immediately if Stomp is connected. If not, it should\n         * subscribe when it gets next connected. Further, it should re-establish the subscription whenever Stomp\n         * successfully reconnects.\n         *\n         * Actual implementation is simple, we filter the BehaviourSubject 'state' so that we can trigger whenever Stomp is\n         * connected. Since 'state' is a BehaviourSubject, if Stomp is already connected, it will immediately trigger.\n         *\n         * The observable that we return to the caller remains the same across all reconnects, so no special handling needed at\n         * the message subscriber.\n         */\n        this._debug(`Request to subscribe ${params.destination}`);\n        const coldObservable = Observable.create((messages) => {\n            /*\n             * These variables will be used as part of the closure and work their magic during unsubscribe\n             */\n            let stompSubscription; // Stomp\n            let stompConnectedSubscription; // RxJS\n            let connectedPre$ = this._connectedPre$;\n            if (params.subscribeOnlyOnce) {\n                connectedPre$ = connectedPre$.pipe(take(1));\n            }\n            const stompErrorsSubscription = this.stompErrors$.subscribe((error) => {\n                const correlatedDestination = this._correlateErrors(error);\n                if (correlatedDestination === params.destination) {\n                    messages.error(error);\n                }\n            });\n            stompConnectedSubscription = connectedPre$.subscribe(() => {\n                this._debug(`Will subscribe to ${params.destination}`);\n                let subHeaders = params.subHeaders;\n                if (typeof subHeaders === 'function') {\n                    subHeaders = subHeaders();\n                }\n                stompSubscription = this._stompClient.subscribe(params.destination, (message) => {\n                    messages.next(message);\n                }, subHeaders);\n            });\n            return () => {\n                /* cleanup function, it will be called when no subscribers are left */\n                this._debug(`Stop watching connection state (for ${params.destination})`);\n                stompConnectedSubscription.unsubscribe();\n                stompErrorsSubscription.unsubscribe();\n                if (this.connected()) {\n                    this._debug(`Will unsubscribe from ${params.destination} at Stomp`);\n                    let unsubHeaders = params.unsubHeaders;\n                    if (typeof unsubHeaders === 'function') {\n                        unsubHeaders = unsubHeaders();\n                    }\n                    stompSubscription.unsubscribe(unsubHeaders);\n                }\n                else {\n                    this._debug(`Stomp not connected, no need to unsubscribe from ${params.destination} at Stomp`);\n                }\n            };\n        });\n        /**\n         * Important - convert it to hot Observable - otherwise, if the user code subscribes\n         * to this observable twice, it will subscribe twice to Stomp broker. (This was happening in the current example).\n         * A long but good explanatory article at https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339\n         */\n        return coldObservable.pipe(share());\n    }\n    /**\n     * **Deprecated** Please use {@link asyncReceipt}.\n     */\n    watchForReceipt(receiptId, callback) {\n        this._stompClient.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use. Typically, a sequence, a UUID, a\n     * random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based on the value of the receipt-id.\n     *\n     * This method allows watching for a receipt and invoking the callback\n     * when the corresponding receipt has been received.\n     *\n     * The promise will yield the actual {@link IFrame}.\n     *\n     * Example:\n     * ```javascript\n     *        // Publishing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});\n     *        await rxStomp.asyncReceipt(receiptId);; // it yields the actual Frame\n     * ```\n     *\n     * Maps to: [Client#watchForReceipt]{@link Client#watchForReceipt}\n     */\n    asyncReceipt(receiptId) {\n        return firstValueFrom(this.unhandledReceipts$.pipe(filter(frame => frame.headers['receipt-id'] === receiptId)));\n    }\n    _changeState(state) {\n        this._connectionStatePre$.next(state);\n        this.connectionState$.next(state);\n    }\n}\n//# sourceMappingURL=rx-stomp.js.map","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { RxStompState } from '@stomp/rx-stomp'\n\nexport enum EnumTopic {\n\tBPMN = '/user/topic/bpmn',\n\tEVIDENCE = 'evidence',\n\tUSER_LOCATION = '/topic/user-location',\n\tCOMMON_BROADCAST = '/topic/common-broadcast',\n}\n\nexport enum EnumPublishDestination {\n\tHEARTBEAT = 'hearbeat',\n}\n\nexport const InformWebsocketText = {\n\t[RxStompState.CONNECTING]: '与服务器断开连接，正在连接中',\n\t[RxStompState.CLOSED]: '与服务器断开连接',\n\t[RxStompState.OPEN]: '已经连接到服务器',\n\t[RxStompState.CLOSING]: '与服务器断开连接',\n}\nexport const InformWebsocketType = {\n\t[RxStompState.CONNECTING]: 'error',\n\t[RxStompState.CLOSED]: 'error',\n\t[RxStompState.OPEN]: 'success',\n\t[RxStompState.CLOSING]: 'error',\n}\n","export class WebscoketConfig {\n\ttimeout = 5000\n\treconnectDelay = 5000\n\theartbeatTime = 15000\n\tbaseUrl = `${location.protocol.startsWith('https') ? 'wss' : 'ws'}://${location.host}`\n\turl = '/api/auth/ws/endpoint'\n}\n","import { RxStomp } from '@stomp/rx-stomp'\nimport { from, interval, Subject, Subscription, timeout } from 'rxjs'\nimport { v4 } from 'uuid'\nimport { EnumTopic, EnumPublishDestination, InformWebsocketType, InformWebsocketText } from './enum'\nimport { TopicHandlers, WebsocketConnectionState, TopicHandler } from './type'\nimport { WebscoketConfig } from './config'\n\nexport class WebSocketService {\n\tprivate rxStomp: RxStomp = new RxStomp()\n\tprivate config = new WebscoketConfig()\n\tprivate topicHandlers: TopicHandlers = {}\n\tprivate topicSubscrition: Partial<Record<EnumTopic, Subscription>> = {}\n\tprivate disconnect$ = new Subject()\n\tpublic readonly connectionState$ = new Subject<WebsocketConnectionState>()\n\n\tinit(config: Partial<WebscoketConfig>) {\n\t\tfor (const key in config) {\n\t\t\t//@ts-ignore\n\t\t\tthis.config[key] = config[key]\n\t\t}\n\t}\n\n\tconnect(token: string) {\n\t\tthis.configure(token)\n\t\tthis.rxStomp.activate()\n\t\tthis.heartbeatSubscribe()\n\t\tthis.stateSubscribe()\n\t}\n\n\tdisconnect() {\n\t\tthis.rxStomp.deactivate()\n\t\tthis.disconnect$.next(true)\n\t\tthis.disconnect$.unsubscribe()\n\t\tthis.unsubscribeAll()\n\t}\n\n\tsubscribe<T extends EnumTopic>(destination: T, handler: TopicHandler<T>) {\n\t\tif (this.topicHandlers[destination]) {\n\t\t\tthis.topicHandlers[destination]!.push(handler)\n\t\t} else {\n\t\t\tthis.topicHandlers[destination] = [handler]\n\t\t\tthis.topicSubscrition[destination] = this.rxStomp\n\t\t\t\t.watch({\n\t\t\t\t\tdestination,\n\t\t\t\t})\n\t\t\t\t.subscribe(val => {\n\t\t\t\t\tthis.topicHandlers[destination]!.forEach(res => res(JSON.parse(val.body)))\n\t\t\t\t})\n\t\t}\n\t}\n\n\tunsubscribe<T extends EnumTopic>(destination: T, handler: TopicHandler<T>) {\n\t\tconst index = this.topicHandlers[destination]?.findIndex(v => v === handler)\n\t\tif (index !== undefined && index > -1) {\n\t\t\tthis.topicHandlers[destination]?.splice(index, 1)\n\t\t\tif (this.topicHandlers[destination]!.length === 0) {\n\t\t\t\tthis.topicSubscrition[destination]?.unsubscribe()\n\t\t\t\tthis.topicSubscrition[destination] = undefined\n\t\t\t}\n\t\t}\n\t}\n\n\tunsubscribeAll() {\n\t\tfor (const destination in this.topicSubscrition) {\n\t\t\tthis.topicSubscrition[destination as EnumTopic]!.unsubscribe()\n\t\t\tthis.topicSubscrition[destination as EnumTopic] = undefined\n\t\t}\n\t}\n\n\tpublish(destination: EnumPublishDestination, body: string) {\n\t\tconst receiptId = v4()\n\t\tthis.rxStomp.publish({\n\t\t\t//@ts-ignore\n\t\t\theaders: {\n\t\t\t\treceipt: receiptId,\n\t\t\t},\n\t\t\tdestination,\n\t\t\tbody,\n\t\t})\n\t\treturn from(this.rxStomp.asyncReceipt(receiptId)).pipe(\n\t\t\ttimeout({\n\t\t\t\tfirst: this.config.timeout,\n\t\t\t})\n\t\t)\n\t}\n\n\tprivate stateSubscribe() {\n\t\tconst stompErrorsSub = this.rxStomp.stompErrors$.subscribe(val => {\n\t\t\tthis.connectionState$.next({\n\t\t\t\ttype: InformWebsocketType['3'],\n\t\t\t\tmessage: InformWebsocketText['3'] + val.body,\n\t\t\t})\n\t\t})\n\t\tconst webSocketErrorsSub = this.rxStomp.webSocketErrors$.subscribe(val => {\n\t\t\tthis.connectionState$.next({\n\t\t\t\ttype: InformWebsocketType['3'],\n\t\t\t\tmessage: InformWebsocketText['3'] + val.type,\n\t\t\t})\n\t\t})\n\t\tconst connectionStateSub = this.rxStomp.connectionState$.subscribe(val => {\n\t\t\tthis.connectionState$.next({\n\t\t\t\ttype: InformWebsocketType[val],\n\t\t\t\tmessage: InformWebsocketText[val],\n\t\t\t})\n\t\t\tif (val !== 1) {\n\t\t\t\tthis.rxStomp.activate()\n\t\t\t}\n\t\t})\n\t\tthis.disconnect$.subscribe(val => {\n\t\t\tstompErrorsSub.unsubscribe()\n\t\t\twebSocketErrorsSub.unsubscribe()\n\t\t\tconnectionStateSub.unsubscribe()\n\t\t})\n\t}\n\n\tprivate configure(token: string) {\n\t\tthis.rxStomp.configure({\n\t\t\tbrokerURL: this.config.baseUrl + this.config.url,\n\t\t\tconnectHeaders: {\n\t\t\t\tAuthorization: token,\n\t\t\t},\n\t\t\treconnectDelay: this.config.reconnectDelay,\n\t\t\theartbeatIncoming: 0, // server to client\n\t\t\theartbeatOutgoing: this.config.timeout,\n\t\t})\n\t}\n\n\tprivate heartbeatSubscribe() {\n\t\tconst heartbeatSubscrition = interval(this.config.heartbeatTime).subscribe(() =>\n\t\t\tthis.publish(EnumPublishDestination.HEARTBEAT, Date.now().toString()).subscribe({\n\t\t\t\tcomplete: () => {},\n\t\t\t\terror: e => {\n\t\t\t\t\tthis.rxStomp.deactivate({ force: true })\n\t\t\t\t},\n\t\t\t})\n\t\t)\n\t\tthis.disconnect$.subscribe(val => {\n\t\t\theartbeatSubscrition.unsubscribe()\n\t\t})\n\t}\n}\n","import { EnumTopic } from './enum'\nimport { TopicResponse } from './type'\nimport { WebSocketService } from './ws'\nimport { onUnmounted } from 'vue'\nimport { createDecorator, getProtoMetadata, Hanlder, injectService } from 'vue3-oop'\n\nexport const WsSubscribe: WsSubscribeDecorator = createDecorator('WsSubscribe')\n\nexport interface WsSubscribeDecorator {\n\t(enumTopic: EnumTopic): PropertyDecorator\n\tMetadataKey: symbol | string\n}\nfunction handler(targetThis: Record<any, any>) {\n\tconst list = getProtoMetadata<EnumTopic>(targetThis, WsSubscribe.MetadataKey)\n\tif (!list || !list.length) return\n\tconst websocketService = injectService(WebSocketService)!\n\tfor (const item of list) {\n\t\tconst { options, key } = item\n\n\t\tconst fn = (e: TopicResponse<EnumTopic>) => targetThis[key as string].call(targetThis, e)\n\t\twebsocketService.subscribe(options, fn)\n\n\t\tonUnmounted(() => {\n\t\t\twebsocketService.unsubscribe(options, fn)\n\t\t})\n\t}\n}\n\nexport const WsSubscribeHandler: Hanlder = {\n\tkey: 'WsSubscribe',\n\thandler,\n}\n"],"names":["BYTE","FrameImpl","params","command","headers","body","binaryBody","escapeHeaderValues","skipContentLengthHeader","rawFrame","trim","str","header","key","value","cmdAndHeaders","lines","name","s","uint8CmdAndHeaders","nullTerminator","uint8Frame","NULL","LF","CR","COLON","Parser","onFrame","onIncomingPing","segment","appendMissingNULLonIncoming","chunk","chunkWithNull","i","byte","contentLengthHeader","rawResult","StompSocketState","ActivationState","Versions","versions","x","augmentWebsocket","webSocket","debug","noOp","ts","id","origOnClose","closeEvent","delay","StompHandler","_client","_webSocket","config","frame","subscription","onReceive","message","client","messageId","callback","parser","evt","rawChunkAsString","errorEvent","connectHeaders","serverOutgoing","serverIncoming","v","ttl","delta","msg","rawChunk","out","disconnectHeaders","error","destination","hdrs","receiptId","transactionId","txId","subscriptionId","Client","conf","_a","state","_activate","__async","options","force","needToDispose","retPromise","origOnWebSocketClose","resolve","reject","RxStompState","RxStomp","stompClient","BehaviorSubject","filter","currentState","Subject","rxStompConfig","stompConfig","parameters","shouldRetry","queuedMessages","queuedMessage","opts","defaults","Observable","messages","stompSubscription","stompConnectedSubscription","connectedPre$","take","stompErrorsSubscription","subHeaders","unsubHeaders","share","firstValueFrom","getRandomValues","rnds8","rng","byteToHex","unsafeStringify","arr","offset","randomUUID","native","v4","buf","rnds","EnumTopic","EnumPublishDestination","InformWebsocketText","InformWebsocketType","WebscoketConfig","__publicField","WebSocketService","token","handler","val","res","index","_b","_c","from","timeout","stompErrorsSub","webSocketErrorsSub","connectionStateSub","heartbeatSubscrition","interval","e","WsSubscribe","createDecorator","targetThis","list","getProtoMetadata","websocketService","injectService","item","fn","onUnmounted","WsSubscribeHandler"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13]}